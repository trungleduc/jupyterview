{"version":3,"file":"6941.9e9df93.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/notebook-extension/lib/trusted.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/notebook-extension/lib/index.js"],"sourcesContent":["import { ReactWidget } from '@jupyterlab/apputils';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport React, { useEffect, useState } from 'react';\n/**\n * Check if a notebook is trusted\n * @param notebook The notebook to check\n * @returns true if the notebook is trusted, false otherwise\n */\nconst isTrusted = (notebook) => {\n    const model = notebook.model;\n    if (!model) {\n        return false;\n    }\n    const cells = Array.from(model.cells);\n    let total = 0;\n    let trusted = 0;\n    for (const currentCell of cells) {\n        if (currentCell.type !== 'code') {\n            continue;\n        }\n        total++;\n        if (currentCell.trusted) {\n            trusted++;\n        }\n    }\n    return trusted === total;\n};\n/**\n * A React component to display the Trusted badge in the menu bar.\n * @param notebook The Notebook\n * @param translator The Translation service\n */\nconst TrustedButton = ({ notebook, translator, }) => {\n    const trans = translator.load('notebook');\n    const [trusted, setTrusted] = useState(isTrusted(notebook));\n    const checkTrust = () => {\n        const v = isTrusted(notebook);\n        setTrusted(v);\n    };\n    const trust = async () => {\n        await NotebookActions.trust(notebook, translator);\n        checkTrust();\n    };\n    useEffect(() => {\n        notebook.modelContentChanged.connect(checkTrust);\n        notebook.activeCellChanged.connect(checkTrust);\n        checkTrust();\n        return () => {\n            notebook.modelContentChanged.disconnect(checkTrust);\n            notebook.activeCellChanged.disconnect(checkTrust);\n        };\n    });\n    return (React.createElement(\"button\", { className: 'jp-NotebookTrustedStatus', style: !trusted ? { cursor: 'pointer' } : { cursor: 'help' }, onClick: () => !trusted && trust(), title: trusted\n            ? trans.__('JavaScript enabled for notebook display')\n            : trans.__('JavaScript disabled for notebook display') }, trusted ? trans.__('Trusted') : trans.__('Not Trusted')));\n};\n/**\n * A namespace for TrustedComponent static methods.\n */\nexport var TrustedComponent;\n(function (TrustedComponent) {\n    /**\n     * Create a new TrustedComponent\n     *\n     * @param notebook The notebook\n     * @param translator The translator\n     */\n    TrustedComponent.create = ({ notebook, translator, }) => {\n        return ReactWidget.create(React.createElement(TrustedButton, { notebook: notebook, translator: translator }));\n    };\n})(TrustedComponent || (TrustedComponent = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, IToolbarWidgetRegistry, ICommandPalette, } from '@jupyterlab/apputils';\nimport { PageConfig, Text, Time, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookPanel, INotebookTracker, INotebookTools, } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { INotebookShell } from '@jupyter-notebook/application';\nimport { Poll } from '@lumino/polling';\nimport { Widget } from '@lumino/widgets';\nimport { TrustedComponent } from './trusted';\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-NotebookKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-NotebookKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-NotebookKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-NotebookKernelStatus-fade';\n/**\n * The class for scrolled outputs\n */\nconst SCROLLED_OUTPUTS_CLASS = 'jp-mod-outputsScrolled';\n/**\n * The class for the full width notebook\n */\nconst FULL_WIDTH_NOTEBOOK_CLASS = 'jp-mod-fullwidth';\n/**\n * The command IDs used by the notebook plugins.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * A command to open right sidebar for Editing Notebook Metadata\n     */\n    CommandIDs.openEditNotebookMetadata = 'notebook:edit-metadata';\n    /**\n     * A command to toggle full width of the notebook\n     */\n    CommandIDs.toggleFullWidth = 'notebook:toggle-full-width';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@jupyter-notebook/notebook-extension:checkpoints',\n    description: 'A plugin for the checkpoint indicator.',\n    autoStart: true,\n    requires: [IDocumentManager, ITranslator],\n    optional: [INotebookShell, IToolbarWidgetRegistry],\n    activate: (app, docManager, translator, notebookShell, toolbarRegistry) => {\n        const { shell } = app;\n        const trans = translator.load('notebook');\n        const node = document.createElement('div');\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'checkpoint', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.id = DOMUtils.createDomID();\n                widget.addClass('jp-NotebookCheckpoint');\n                return widget;\n            });\n        }\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return;\n            }\n            const context = docManager.contextForWidget(current);\n            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);\n            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);\n            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());\n            if (!checkpoints) {\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            node.textContent = trans.__('Last Checkpoint: %1', Time.formatHuman(new Date(checkpoint.last_modified)));\n        };\n        if (notebookShell) {\n            notebookShell.currentChanged.connect(onChange);\n        }\n        new Poll({\n            auto: true,\n            factory: () => onChange(),\n            frequency: {\n                interval: 2000,\n                backoff: false,\n            },\n            standby: 'when-hidden',\n        });\n    },\n};\n/**\n * Add a command to close the browser tab when clicking on \"Close and Shut Down\"\n */\nconst closeTab = {\n    id: '@jupyter-notebook/notebook-extension:close-tab',\n    description: 'Add a command to close the browser tab when clicking on \"Close and Shut Down\".',\n    autoStart: true,\n    requires: [IMainMenu],\n    optional: [ITranslator],\n    activate: (app, menu, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:close-and-halt';\n        commands.addCommand(id, {\n            label: trans.__('Close and Shut Down Notebook'),\n            execute: async () => {\n                // Shut the kernel down, without confirmation\n                await commands.execute('notebook:shutdown-kernel', { activate: false });\n                window.close();\n            },\n        });\n        menu.fileMenu.closeAndCleaners.add({\n            id,\n            // use a small rank to it takes precedence over the default\n            // shut down action for the notebook\n            rank: 0,\n        });\n    },\n};\n/**\n * Add a command to open the tree view from the notebook view\n */\nconst openTreeTab = {\n    id: '@jupyter-notebook/notebook-extension:open-tree-tab',\n    description: 'Add a command to open a browser tab on the tree view when clicking \"Open...\".',\n    autoStart: true,\n    optional: [ITranslator],\n    activate: (app, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:open-tree-tab';\n        commands.addCommand(id, {\n            label: trans.__('Open…'),\n            execute: async () => {\n                const url = URLExt.join(PageConfig.getBaseUrl(), 'tree');\n                window.open(url);\n            },\n        });\n    },\n};\n/**\n * A plugin to set the notebook to full width.\n */\nconst fullWidthNotebook = {\n    id: '@jupyter-notebook/notebook-extension:full-width-notebook',\n    description: 'A plugin to set the notebook to full width.',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ICommandPalette, ISettingRegistry, ITranslator],\n    activate: (app, tracker, palette, settingRegistry, translator) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('notebook');\n        let fullWidth = false;\n        const toggleFullWidth = () => {\n            const current = tracker.currentWidget;\n            fullWidth = !fullWidth;\n            if (!current) {\n                return;\n            }\n            const content = current;\n            content.toggleClass(FULL_WIDTH_NOTEBOOK_CLASS, fullWidth);\n        };\n        let notebookSettings;\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(fullWidthNotebook.id);\n            const updateSettings = (settings) => {\n                const newFullWidth = settings.get('fullWidthNotebook')\n                    .composite;\n                if (newFullWidth !== fullWidth) {\n                    toggleFullWidth();\n                }\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                notebookSettings = settings;\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        app.commands.addCommand(CommandIDs.toggleFullWidth, {\n            label: trans.__('Enable Full Width Notebook'),\n            execute: () => {\n                toggleFullWidth();\n                if (notebookSettings) {\n                    notebookSettings.set('fullWidthNotebook', fullWidth);\n                }\n            },\n            isEnabled: () => tracker.currentWidget !== null,\n            isToggled: () => fullWidth,\n        });\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.toggleFullWidth,\n                category: 'Notebook Operations',\n            });\n        }\n    },\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@jupyter-notebook/notebook-extension:kernel-logo',\n    description: 'The kernel logo plugin.',\n    autoStart: true,\n    requires: [INotebookShell],\n    optional: [IToolbarWidgetRegistry],\n    activate: (app, shell, toolbarRegistry) => {\n        const { serviceManager } = app;\n        const node = document.createElement('div');\n        const img = document.createElement('img');\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            if (!node.hasChildNodes()) {\n                node.appendChild(img);\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                node.childNodes[0].remove();\n                return;\n            }\n            const kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                node.childNodes[0].remove();\n                return;\n            }\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n        };\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'kernelLogo', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.addClass('jp-NotebookKernelLogo');\n                return widget;\n            });\n        }\n        app.started.then(() => {\n            shell.currentChanged.connect(onChange);\n        });\n    },\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@jupyter-notebook/notebook-extension:kernel-status',\n    description: 'A plugin to display the kernel status.',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    activate: (app, shell, translator) => {\n        const trans = translator.load('notebook');\n        const widget = new Widget();\n        widget.addClass('jp-NotebookKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = trans.__(text);\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to enable scrolling for outputs by default.\n * Mimic the logic from the classic notebook, as found here:\n * https://github.com/jupyter/notebook/blob/a9a31c096eeffe1bff4e9164c6a0442e0e13cdb3/notebook/static/notebook/js/outputarea.js#L96-L120\n */\nconst scrollOutput = {\n    id: '@jupyter-notebook/notebook-extension:scroll-output',\n    description: 'A plugin to enable scrolling for outputs by default.',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ISettingRegistry],\n    activate: async (app, tracker, settingRegistry) => {\n        const autoScrollThreshold = 100;\n        let autoScrollOutputs = true;\n        // decide whether to scroll the output of the cell based on some heuristics\n        const autoScroll = (cell) => {\n            if (!autoScrollOutputs) {\n                // bail if disabled via the settings\n                cell.removeClass(SCROLLED_OUTPUTS_CLASS);\n                return;\n            }\n            const { outputArea } = cell;\n            // respect cells with an explicit scrolled state\n            const scrolled = cell.model.getMetadata('scrolled');\n            if (scrolled !== undefined) {\n                return;\n            }\n            const { node } = outputArea;\n            const height = node.scrollHeight;\n            const fontSize = parseFloat(node.style.fontSize.replace('px', ''));\n            const lineHeight = (fontSize || 14) * 1.3;\n            // do not set via cell.outputScrolled = true, as this would\n            // otherwise synchronize the scrolled state to the notebook metadata\n            const scroll = height > lineHeight * autoScrollThreshold;\n            cell.toggleClass(SCROLLED_OUTPUTS_CLASS, scroll);\n        };\n        const handlers = {};\n        const setAutoScroll = (cell) => {\n            if (cell.model.type === 'code') {\n                const codeCell = cell;\n                const id = codeCell.model.id;\n                autoScroll(codeCell);\n                if (handlers[id]) {\n                    codeCell.outputArea.model.changed.disconnect(handlers[id]);\n                }\n                handlers[id] = () => autoScroll(codeCell);\n                codeCell.outputArea.model.changed.connect(handlers[id]);\n            }\n        };\n        tracker.widgetAdded.connect((sender, notebook) => {\n            var _a;\n            // when the notebook widget is created, process all the cells\n            notebook.sessionContext.ready.then(() => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n            (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect((sender, args) => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(scrollOutput.id);\n            const updateSettings = (settings) => {\n                autoScrollOutputs = settings.get('autoScrollOutputs')\n                    .composite;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    },\n};\n/**\n * A plugin to add the NotebookTools to the side panel;\n */\nconst notebookToolsWidget = {\n    id: '@jupyter-notebook/notebook-extension:notebook-tools',\n    description: 'A plugin to add the NotebookTools to the side panel.',\n    autoStart: true,\n    requires: [INotebookShell],\n    optional: [INotebookTools],\n    activate: (app, shell, notebookTools) => {\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            // Add the notebook tools in right area.\n            if (notebookTools) {\n                shell.add(notebookTools, 'right', { type: 'Property Inspector' });\n            }\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to update the tab icon based on the kernel status.\n */\nconst tabIcon = {\n    id: '@jupyter-notebook/notebook-extension:tab-icon',\n    description: 'A plugin to update the tab icon based on the kernel status.',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, tracker) => {\n        // the favicons are provided by Jupyter Server\n        const baseURL = PageConfig.getBaseUrl();\n        const notebookIcon = URLExt.join(baseURL, 'static/favicons/favicon-notebook.ico');\n        const busyIcon = URLExt.join(baseURL, 'static/favicons/favicon-busy-1.ico');\n        const updateBrowserFavicon = (status) => {\n            const link = document.querySelector(\"link[rel*='icon']\");\n            switch (status) {\n                case 'busy':\n                    link.href = busyIcon;\n                    break;\n                case 'idle':\n                    link.href = notebookIcon;\n                    break;\n            }\n        };\n        const onChange = async () => {\n            const current = tracker.currentWidget;\n            const sessionContext = current === null || current === void 0 ? void 0 : current.sessionContext;\n            if (!sessionContext) {\n                return;\n            }\n            sessionContext.statusChanged.connect(() => {\n                const status = sessionContext.kernelDisplayStatus;\n                updateBrowserFavicon(status);\n            });\n        };\n        tracker.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin that adds a Trusted indicator to the menu area\n */\nconst trusted = {\n    id: '@jupyter-notebook/notebook-extension:trusted',\n    description: 'A plugin that adds a Trusted indicator to the menu area.',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    activate: (app, notebookShell, translator) => {\n        const onChange = async () => {\n            const current = notebookShell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const notebook = current.content;\n            await current.context.ready;\n            const widget = TrustedComponent.create({ notebook, translator });\n            notebookShell.add(widget, 'menu', {\n                rank: 11000,\n            });\n        };\n        notebookShell.currentChanged.connect(onChange);\n    },\n};\n/**\n * Add a command to open right sidebar for Editing Notebook Metadata when clicking on \"Edit Notebook Metadata\" under Edit menu\n */\nconst editNotebookMetadata = {\n    id: '@jupyter-notebook/notebook-extension:edit-notebook-metadata',\n    description: 'Add a command to open right sidebar for Editing Notebook Metadata when clicking on \"Edit Notebook Metadata\" under Edit menu',\n    autoStart: true,\n    optional: [ICommandPalette, ITranslator, INotebookTools],\n    activate: (app, palette, translator, notebookTools) => {\n        const { commands, shell } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        commands.addCommand(CommandIDs.openEditNotebookMetadata, {\n            label: trans.__('Edit Notebook Metadata'),\n            execute: async () => {\n                const command = 'application:toggle-panel';\n                const args = {\n                    side: 'right',\n                    title: 'Show Notebook Tools',\n                    id: 'notebook-tools',\n                };\n                // Check if Show Notebook Tools (Right Sidebar) is open (expanded)\n                if (!commands.isToggled(command, args)) {\n                    await commands.execute(command, args).then((_) => {\n                        // For expanding the 'Advanced Tools' section (default: collapsed)\n                        if (notebookTools) {\n                            const tools = (notebookTools === null || notebookTools === void 0 ? void 0 : notebookTools.layout).widgets;\n                            tools.forEach((tool) => {\n                                if (tool.widget.title.label === trans.__('Advanced Tools') &&\n                                    tool.collapsed) {\n                                    tool.toggle();\n                                }\n                            });\n                        }\n                    });\n                }\n            },\n            isVisible: () => shell.currentWidget !== null &&\n                shell.currentWidget instanceof NotebookPanel,\n        });\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.openEditNotebookMetadata,\n                category: 'Notebook Operations',\n            });\n        }\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    closeTab,\n    openTreeTab,\n    editNotebookMetadata,\n    fullWidthNotebook,\n    kernelLogo,\n    kernelStatus,\n    notebookToolsWidget,\n    scrollOutput,\n    tabIcon,\n    trusted,\n];\nexport default plugins;\n"],"names":["isTrusted","notebook","model","cells","Array","from","total","trusted","currentCell","type","TrustedButton","translator","trans","load","setTrusted","useState","checkTrust","v","useEffect","modelContentChanged","connect","activeCellChanged","disconnect","className","style","cursor","onClick","async","NotebookActions","trust","title","__","TrustedComponent","create","ReactWidget","KERNEL_STATUS_ERROR_CLASS","KERNEL_STATUS_WARN_CLASS","KERNEL_STATUS_INFO_CLASS","KERNEL_STATUS_FADE_OUT_CLASS","SCROLLED_OUTPUTS_CLASS","CommandIDs","openEditNotebookMetadata","toggleFullWidth","checkpoints","id","description","autoStart","requires","IDocumentManager","ITranslator","optional","INotebookShell","IToolbarWidgetRegistry","activate","app","docManager","notebookShell","toolbarRegistry","shell","node","document","createElement","addFactory","toolbar","widget","Widget","DOMUtils","createDomID","addClass","onChange","current","currentWidget","context","contextForWidget","fileChanged","listCheckpoints","checkpoint","length","textContent","Time","formatHuman","Date","last_modified","currentChanged","Poll","auto","factory","frequency","interval","backoff","standby","closeTab","IMainMenu","menu","commands","nullTranslator","addCommand","label","execute","window","close","fileMenu","closeAndCleaners","add","rank","openTreeTab","url","URLExt","join","PageConfig","getBaseUrl","open","fullWidthNotebook","INotebookTracker","ICommandPalette","ISettingRegistry","tracker","palette","settingRegistry","fullWidth","toggleClass","notebookSettings","loadSettings","updateSettings","settings","get","composite","Promise","all","restored","then","changed","catch","reason","console","error","message","set","isEnabled","isToggled","addItem","command","category","kernelLogo","serviceManager","img","_a","_b","_c","_d","_e","NotebookPanel","hasChildNodes","appendChild","sessionContext","ready","kernelChanged","name","session","kernel","spec","kernelspecs","specs","childNodes","remove","kernelIconUrl","resources","src","display_name","started","kernelStatus","onStatusChanged","status","kernelDisplayStatus","text","Text","titleCase","removeClass","statusChanged","scrollOutput","autoScrollOutputs","autoScroll","cell","outputArea","undefined","getMetadata","scroll","scrollHeight","parseFloat","fontSize","replace","handlers","setAutoScroll","codeCell","widgetAdded","sender","content","widgets","forEach","args","notebookToolsWidget","INotebookTools","notebookTools","tabIcon","baseURL","notebookIcon","busyIcon","link","querySelector","href","updateBrowserFavicon","side","_","layout","tool","collapsed","toggle","isVisible"],"sourceRoot":""}