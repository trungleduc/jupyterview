{"version":3,"file":"6271.2ab2b5d.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lezer/markdown/dist/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n    Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length &&\n        cx.parser.leafBlockParsers.indexOf(DefaultLeafBlocks.SetextHeading) > -1)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bigger than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            for (let markI = 0;;) {\n                let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n                while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n                    let mark = line.markers[markI++];\n                    this.addNode(mark.type, mark.from, mark.to);\n                }\n                if (!next)\n                    break;\n                this.finishContext();\n            }\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{S}|\\\\p{P}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url) {\n            return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [\n                elt(Type.LinkMark, start, start + 1),\n                // url[0] includes the closing bracket, so exclude it from this slice\n                elt(Type.URL, start + 1, start + url[0].length),\n                elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)\n            ]));\n        }\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            // The destination and title must be separated by whitespace\n            if (pos != dest.to) {\n                title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n                if (title)\n                    pos = cx.skipSpace(title.to);\n            }\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /// Returns true when there is an unmatched link or image opening\n    /// token before the current position.\n    get hasOpenLink() {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))\n                return true;\n        }\n        return false;\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    \"URL Autolink\": tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]{,100}@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                if (pos && /\\w/.test(cx.text[pos - 1]))\n                    return -1;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && cx.hasOpenLink) {\n                        let noBracket = /([^\\[\\]]|\\[[^\\]]*\\])*/.exec(cx.text.slice(pos, end));\n                        end = pos + noBracket[0].length;\n                    }\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null || isList(type) ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction isList(type) {\n    return type.name == \"OrderedList\" || type.name == \"BulletList\";\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            let first = inner.node.firstChild, second = inner.node.getChild(\"ListItem\", \"ListItem\");\n            // Not second item or blank line before: delete a level of markup\n            if (first.to >= pos || second && second.to < pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move second item down, making tight two-item list non-tight\n                let insert = blankLine(context, state, line);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        if (nonTightList(inner.node, state.doc))\n            insert = blankLine(context, state, line) + state.lineBreak + insert;\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction nonTightList(node, doc) {\n    if (node.name != \"OrderedList\" && node.name != \"BulletList\")\n        return false;\n    let first = node.firstChild, second = node.getChild(\"ListItem\", \"ListItem\");\n    if (!second)\n        return false;\n    let line1 = doc.lineAt(first.to), line2 = doc.lineAt(second.from);\n    let empty = /^[\\s>]*$/.test(line1.text);\n    return line1.number + (empty ? 0 : 1) < line2.number;\n}\nfunction blankLine(context, state, line) {\n    let insert = \"\";\n    for (let i = 0, e = context.length - 2; i <= e; i++) {\n        insert += context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null, i < e);\n    }\n    return normalizeIndent(insert, state);\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true, htmlTagLanguage = htmlNoMatch } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlTagLanguage.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlTagLanguage.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","create","type","value","from","parentHash","end","constructor","hash","children","positions","this","hashProp","NodeProp","contextHash","addChild","child","pos","prop","Tree","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","NodeType","none","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","parser","leafBlockParsers","indexOf","DefaultLeafBlocks","SetextHeading","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","markI","mark","finishContext","reuseFragment","blockParsers","parse","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","Parser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","Tag","NodeSet","extend","styleTags","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Punctuation","RegExp","DefaultInline","escaped","Escapable","append","Entity","exec","InlineCode","curSize","HTMLTag","url","Autolink","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","hasOpenLink","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","tags","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","heading","TaskParser","TaskList","atom","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkEmailEnd","lastIndex","GFM","absPos","index","autolinkURLEnd","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","defineLanguageFacet","commentTokens","headingProp","commonmark","foldNodeProp","add","isHeading","isList","state","doc","lineAt","indentNodeProp","languageDataProp","findSectionEnd","headerNode","level","headerIndent","foldService","of","syntaxTree","resolveInner","mkLang","Language","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","normalizeIndent","facet","indentUnit","countColumn","insertNewlineContinueMarkup","dispatch","dont","changeByRange","range","empty","isActiveAt","emptyLine","second","getChild","delTo","EditorSelection","blankLine","lineBreak","prevLine","quoted","continued","charAt","line1","line2","nonTightList","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","completeHTMLTags","htmlTagLanguage","defaultCode","extensions","support","LanguageSupport","language","codeParser","languages","defaultLanguage","info","LanguageDescription","matchLanguageName","ParseContext","getSkippingParser","load","htmlParser","parseMixed","overlay","infoNode","parseCode","Prec","high","keymap","lang","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","htmlCompletionSource","EditorState"],"sourceRoot":""}