{"version":3,"file":"lib_index_js-lib_itkConfig_js-webpack_sharing_consume_default_emotion_react_emotion_react-web-512d65.397df1c5516edd38f420.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAqE;AAChB;AACX;AAC6C;AACnC;AACE;AACL;AACA;AACI;AACN;AACE;AACV;AACG;AAC1C;AACA;AACA;AACA,wBAAwB,mDAAU,GAAG,uBAAuB;AAC5D,IAAI,6DAAgB,cAAc,mDAAc;AAChD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,+BAA+B,6CAA6C;AAC5E;AACA,SAAS;AACT;AACA,8BAA8B,0DAAa;AAC3C,0BAA0B,wDAAS;AACnC;AACA,6BAA6B,8DAAY;AACzC;AACA;AACA;AACA;AACA,8BAA8B,uEAAwB;AACtD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,sEAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS,OAAO,SAAS;AACtD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+DAAiB;AAC/C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAe,EAAE,+DAAa,EAAE,8DAAS;AACxD,cAAc,2DAAsB;AACpC;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAe,EAAE,8DAAS,EAAE,2DAAsB;AACjE;AACA,iCAAiC,2DAAW;AAC5C;AACA;AACA,kCAAkC,iDAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,sBAAsB,EAAC;;;;;;;;;;;;;;;;;;ACpHa;AACnD,eAAe,6DAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;ACTgB;AACA;AACzC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAI;AAC1B;AACA,SAAS;AACT;AACA,iEAAiE,OAAO;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAI;AAC1B;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,IAAI;AAC1D,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,8BAA8B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxI+B;AAC2C;AACnE,4BAA4B,4CAAe;AAClD;AACA,gBAAgB,gDAAmB,UAAU,kCAAkC;AAC/E,YAAY,gDAAmB,aAAa,+GAA+G;AAC3J,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB,CAAC,iDAAa;AACrD,YAAY,gDAAmB;AAC/B;AACA,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,aAAa,oIAAoI;AAChL,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB,CAAC,kDAAc;AACtD;AACA,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,aAAa,sIAAsI;AAClL,gBAAgB,gDAAmB;AACnC,oBAAoB,gDAAmB,CAAC,mDAAe;AACvD;AACA,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,aAAa,0IAA0I;AACtL,gBAAgB,gDAAmB;AACnC;AACA,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,aAAa,0IAA0I;AACtL,gBAAgB,gDAAmB;AACnC;AACA,YAAY,gDAAmB;AAC/B,YAAY,gDAAmB,aAAa,0IAA0I;AACtL,gBAAgB,gDAAmB;AACnC;AACA;;;;;;;;;;;;;;;;;;;;;AChC2D;AAChB;AACoB;AACxD,uCAAuC,qEAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAiB;AACpC;AACA,yBAAyB,qDAAgB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAgB;AAC1C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFuD;AACW;AACnC;AACG;AACqB;AACK;AACa;AACF;AAC8B;AACzC;AACQ;AACwB;AACF;AAC5B;AAC0B;AACV;AACwB;AAChE;AACoC;AACmC;AACL;AACxD;AAC2C;AACpF,uBAAuB,4CAAe;AAC7C;AACA;AACA;AACA,oCAAoC,yBAAyB;AAC7D,mDAAmD,gDAAW;AAC9D,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA,sDAAsD,iDAAY;AAClE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uFAAS;AACrC,6BAA6B,wFAAU;AACvC;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iCAAiC;AAC1F,iBAAiB;AACjB,4BAA4B,uFAAS;AACrC;AACA;AACA,0BAA0B,wFAAU;AACpC,0BAA0B,wFAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uGAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,8BAA8B,KAAK;AACnC,wCAAwC,KAAK;AAC7C,iBAAiB;AACjB;AACA,wCAAwC,oBAAoB;AAC5D;AACA,sCAAsC,MAAM,IAAI,MAAM;AACtD,gDAAgD,KAAK,GAAG,MAAM;AAC9D,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,8BAA8B,KAAK;AACnC,uCAAuC,KAAK;AAC5C,iBAAiB;AACjB,oCAAoC,oBAAoB;AACxD;AACA,kCAAkC,MAAM,EAAE,MAAM;AAChD,2CAA2C,KAAK,GAAG,MAAM;AACzD,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,yGAAoC;AACpE,2BAA2B,0FAAqB;AAChD;AACA;AACA;AACA,aAAa;AACb;AACA,0BAA0B,wFAAoB;AAC9C;AACA,kDAAkD,iDAAY;AAC9D;AACA;AACA,aAAa;AACb;AACA,+BAA+B,8FAAyB;AACxD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,mDAAmD,gDAAW;AAC9D;AACA;AACA,mCAAmC,kGAA6B;AAChE;AACA;AACA,4BAA4B,iDAAY;AACxC;AACA,aAAa;AACb;AACA;AACA,4BAA4B,iDAAY;AACxC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iFAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kDAAa;AAC9C,2CAA2C,kDAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B,EAAE,sDAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAU;AAC1B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAQ;AACnC;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,aAAa;AACb,SAAS;AACT;AACA,YAAY,gDAAW;AACvB;AACA,gBAAgB,wCAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAAe;AACxC;AACA;AACA;AACA;AACA;AACA,uCAAuC,8GAAyC;AAChF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB,6FAAwB;AACjD,sCAAsC,+GAAsC;AAC5E;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kCAAkC,+FAA4B;AAC9D;AACA,2BAA2B,mHAA2C;AACtE;AACA;AACA;AACA;AACA,sCAAsC,8BAA8B;AACpE;AACA;AACA;AACA,2CAA2C,oFAA8B;AACzE;AACA;AACA;AACA,2BAA2B,kDAAS;AACpC;AACA;AACA,2BAA2B,kDAAS;AACpC;AACA;AACA,2BAA2B,kDAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,oDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,KAAK,GAAG,sBAAsB;AACxG;AACA;AACA,mDAAmD,gEAAG;AACtD;AACA;AACA;AACA,wDAAwD,iCAAiC;AACzF,qEAAqE,UAAU;AAC/E;AACA;AACA,wDAAwD,iBAAiB;AACzE;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAW;AACtC;AACA;AACA,iCAAiC,iEAAe;AAChD;AACA;AACA;AACA;AACA,4BAA4B,SAAS,GAAG,QAAQ;AAChD;AACA;AACA;AACA,iBAAiB;AACjB,uCAAuC,qCAAqC;AAC5E,4BAA4B,QAAQ,IAAI,SAAS,IAAI,SAAS;AAC9D,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,SAAS,EAAE,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS,IAAI,SAAS,OAAO,SAAS;AAClE;AACA;AACA,4BAA4B,SAAS,QAAQ,SAAS,OAAO,SAAS;AACtE;AACA,qBAAqB;AACrB;AACA,oBAAoB,IAAI,SAAS,IAAI,SAAS;AAC9C;AACA;AACA,mDAAmD,SAAS,YAAY;AACxE;AACA;AACA,0BAA0B,uEAAuB;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,gDAAmB,UAAU;AAC7C;AACA;AACA,eAAe;AACf,YAAY,gDAAmB,UAAU,sCAAsC,iDAAiD;AAChI,gBAAgB,gDAAmB,UAAU,oCAAoC;AACjF,gBAAgB,gDAAmB,QAAQ;AAC3C;AACA;AACA;AACA;AACA,uBAAuB,KAAK,mBAAmB;AAC/C,YAAY,gDAAmB,UAAU;AACzC;AACA;AACA,gCAAgC,6CAAQ;AACxC,mBAAmB;AACnB,YAAY,gDAAmB,CAAC,0DAAa,IAAI,mHAAmH;AACpK;AACA;;;;;;;;;;;;;;;;;;;;;ACjjB2C;AACD;AACnC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qDAAM;AACzC,iCAAiC,qDAAM;AACvC,iCAAiC,qDAAM;AACvC,kCAAkC,qDAAM;AACxC,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,6BAA6B,oDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,yCAAyC,qDAAM;AAC/C,4CAA4C,qDAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;ACvMO;AACA;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACdkD;AAC1B;AACoB;AACR;AACL;AAC/B,gCAAgC,mEAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,+BAA+B,6DAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAM;AACd;AACA;AACA;AACA,eAAe,gDAAmB,CAAC,+CAAQ,IAAI,+CAA+C;AAC9F;AACA;;;;;;;;;;;;;;;;;;;;;;AC9C+B;AACkC;AACyB;AAC/C;AAC5B,yBAAyB,4CAAe;AACvD;AACA;AACA;AACA,iCAAiC,gDAAmB;AACpD;AACA;AACA;AACA;AACA,kCAAkC,gDAAmB,UAAU,mCAAmC;AAClG,oBAAoB,gDAAmB,UAAU,SAAS,gBAAgB;AAC1E,wBAAwB,gDAAmB;AAC3C,wBAAwB,gDAAmB,YAAY,gLAAgL;AACvO,oBAAoB,gDAAmB,UAAU;AACjD;AACA;AACA;AACA,2BAA2B;AAC3B,wBAAwB,gDAAmB,aAAa,oGAAoG,EAAE,8DAAO,gBAAgB,MAAM,kEAAW,EAAE;AACxM,oBAAoB,gDAAmB,UAAU,SAAS,gBAAgB;AAC1E,wBAAwB,gDAAmB;AAC3C,wBAAwB,gDAAmB,YAAY,gLAAgL;AACvO;AACA;AACA;AACA,uBAAuB;AACvB,gCAAgC,sGAAY,iCAAiC,8BAA8B;AAC3G;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,gBAAgB,gDAAmB,UAAU,6CAA6C;AAC1F,YAAY,uDAAe;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,uDAAe;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpD+B;AACY;AAC5B,2BAA2B,4CAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oCAAoC,uCAAuC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT,gBAAgB,gDAAmB,UAAU,6CAA6C;AAC1F,YAAY,uDAAe;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,gDAAmB,UAAU;AACzC;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB,gDAAmB,aAAa,SAAS,cAAc,wFAAwF;AAC/J,gBAAgB,gDAAmB,aAAa,SAAS,cAAc,4EAA4E;AACnJ,gBAAgB,gDAAmB,aAAa,SAAS,cAAc,mFAAmF;AAC1J;AACA;;;;;;;;;;;;;;;;;;;;AC5F+B;AACY;AACpC;AACP,MAAM,kCAAkC;AACxC,MAAM,4CAA4C;AAClD,MAAM,oCAAoC;AAC1C,MAAM,iCAAiC;AACvC,MAAM;AACN;AACe,2BAA2B,4CAAe;AACzD;AACA;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB,gDAAmB,UAAU,6CAA6C;AAC1F,YAAY,uDAAe;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,gDAAmB,UAAU,mCAAmC;AAC5E,gBAAgB,gDAAmB,UAAU,SAAS,iBAAiB;AACvE,oBAAoB,gDAAmB;AACvC;AACA;AACA,oBAAoB,gDAAmB,YAAY,6KAA6K;AAChO;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7B+B;AAC6B;AACZ;AACc;AACA;AAC1B;AACE;AACI;AACkB;AACxB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB,uDAAY;AACjC;AACA;AACA;AACe,uBAAuB,4CAAe;AACrD;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oCAAoC,8BAA8B;AAClE;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA,6CAA6C,sCAAsC;AACnF;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC,gDAAQ;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,UAAU,mCAAmC;AAChF,YAAY,gDAAmB,UAAU,4DAA4D;AACrG,gBAAgB,gDAAmB;AACnC,YAAY,gDAAmB,CAAC,+DAAS,IAAI,yCAAyC,qBAAqB;AAC3G,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,YAAY,gDAAmB,CAAC,sEAAc,qJAAqJ;AAC3P,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,oBAAoB;AAC5E,oBAAoB,gDAAmB,CAAC,qDAAY,IAAI,0KAA0K;AAClO,YAAY,gDAAmB,CAAC,+DAAS,IAAI,mCAAmC;AAChF,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,YAAY,gDAAmB,CAAC,sEAAc,qJAAqJ;AAC3P,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,oBAAoB;AAC5E,oBAAoB,gDAAmB,CAAC,qDAAY,IAAI,mJAAmJ;AAC3M,YAAY,gDAAmB,CAAC,+DAAS,IAAI,iCAAiC;AAC9E,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,YAAY,gDAAmB,CAAC,sEAAc,+IAA+I;AACrP,oBAAoB,gDAAmB,WAAW,wBAAwB;AAC1E,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,4CAA4C;AACpG,oBAAoB,gDAAmB,CAAC,mDAAU,IAAI,wQAAwQ;AAC9T,YAAY,gDAAmB,CAAC,+DAAS,IAAI,kCAAkC;AAC/E,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,YAAY,gDAAmB,CAAC,sEAAc,kJAAkJ;AACxP,oBAAoB,gDAAmB;AACvC,gBAAgB,gDAAmB,CAAC,sEAAgB,IAAI,oBAAoB;AAC5E,oBAAoB,gDAAmB,CAAC,kDAAS,IAAI,iWAAiW;AACtZ;AACA;;;;;;;;;;;;;;;;;;;;;ACzM+B;AACoB;AACf;AAC7B,0BAA0B,6DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,CAAC,kDAAS,IAAI,0DAA0D;AAC3G;AACA;;;;;;;;;;;;;;;;;;;AC/B+B;AACY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACe,wBAAwB,4CAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,kBAAkB,GAAG,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2BAA2B;AAC/D;AACA,SAAS;AACT,gBAAgB,gDAAmB,UAAU,6CAA6C;AAC1F,YAAY,uDAAe;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,gDAAmB,UAAU,4CAA4C,2BAA2B;AAChH,gBAAgB,gDAAmB,UAAU,oBAAoB;AACjE,oBAAoB,gDAAmB;AACvC,oBAAoB,gDAAmB,YAAY,oDAAoD,cAAc;AACrH,iCAAiC;AACjC,2EAA2E;AAC3E,gBAAgB,gDAAmB,UAAU,oBAAoB;AACjE,oBAAoB,gDAAmB;AACvC,oBAAoB,gDAAmB,YAAY,sDAAsD,eAAe,2IAA2I;AACnQ,gBAAgB,gDAAmB,UAAU,oBAAoB;AACjE,4BAA4B,gDAAmB,YAAY,yBAAyB,cAAc;AAClG,gGAAgG,GAAG;AACnG;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;;;;;;;;;;;;;;;;ACvFO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;AC3DO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0CAA0C;AAC3E;AACA;;;;;;;;;;;;;;;;;;ACX0C;AACnC,mCAAmC,oDAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDhB;AACqB;AACM;AACW;AACF;AACK;AACjE,yBAAyB,8DAAO;AACvC;AACA,YAAY,uDAAc;AAC1B,CAAC;AACM,4BAA4B,8DAAO;AAC1C;AACA,YAAY,qEAAW;AACvB,CAAC;AACM,2BAA2B,8DAAO;AACzC;AACA,YAAY,oEAAU;AACtB,CAAC;AACM,0BAA0B,8DAAO;AACxC;AACA,YAAY,0EAAS;AACrB,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD;AACA;AACA;AACA;AACA,wBAAwB,+EAA+E;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,gDAAmB,UAAU,yDAAyD,6BAA6B;AAC/H,QAAQ,gDAAmB,UAAU,yCAAyC,kBAAkB;AAChG,0BAA0B,gDAAmB,+BAA+B,gDAAmB;AAC/F,YAAY,gDAAmB,aAAa,0FAA0F,oBAAoB,+BAA+B,gDAAmB,aAAa,qBAAqB;AAC9O;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;ACxMqD;AACV;AACpC,yBAAyB,+DAAa;AAC7C;AACA;AACA,mCAAmC,qDAAM;AACzC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA","sources":["webpack://jupyterview/./lib/index.js","webpack://jupyterview/./lib/itkConfig.js","webpack://jupyterview/./lib/kernel.js","webpack://jupyterview/./lib/mainview/cameraToolbar.js","webpack://jupyterview/./lib/mainview/factory.js","webpack://jupyterview/./lib/mainview/mainview.js","webpack://jupyterview/./lib/mainview/model.js","webpack://jupyterview/./lib/mainview/utils.js","webpack://jupyterview/./lib/mainview/widget.js","webpack://jupyterview/./lib/panelview/colorpanel.js","webpack://jupyterview/./lib/panelview/datasetpanel.js","webpack://jupyterview/./lib/panelview/displaypanel.js","webpack://jupyterview/./lib/panelview/panelview.js","webpack://jupyterview/./lib/panelview/widget.js","webpack://jupyterview/./lib/panelview/wrappanel.js","webpack://jupyterview/./lib/reader/manager.js","webpack://jupyterview/./lib/reader/meshioParser.js","webpack://jupyterview/./lib/reader/vtkParser.js","webpack://jupyterview/./lib/token.js","webpack://jupyterview/./lib/tools.js","webpack://jupyterview/./lib/vtkTracker.js","webpack://jupyterview/ignored|/home/runner/work/jupyterview/jupyterview/node_modules/seedrandom|crypto"],"sourcesContent":["import { ILabShell, ILayoutRestorer } from '@jupyterlab/application';\nimport { IThemeManager } from '@jupyterlab/apputils';\nimport { KernelExecutor } from './kernel';\nimport { JupyterViewModelFactory, JupyterViewWidgetFactory } from './mainview/factory';\nimport { JupyterViewModel } from './mainview/model';\nimport { JupyterViewWidget } from './mainview/widget';\nimport { PanelWidget } from './panelview/widget';\nimport { ParserManager } from './reader/manager';\nimport { MeshIOParser } from './reader/meshioParser';\nimport { VtkParser } from './reader/vtkParser';\nimport { IJupyterViewDocTracker } from './token';\nimport { jvcLightIcon } from './tools';\nimport { VtkTracker } from './vtkTracker';\nconst FACTORY = 'Jupyterview Factory';\nconst NAME_SPACE = 'jupyterview';\nconst activate = (app, restorer, themeManager, shell) => {\n    const tracker = new VtkTracker({ namespace: NAME_SPACE });\n    JupyterViewModel.kernel = new KernelExecutor({\n        manager: app.serviceManager,\n        jupyterLite: !!document.getElementById('jupyter-lite-main')\n    });\n    if (restorer) {\n        restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    const parserManager = new ParserManager();\n    const vtkParser = new VtkParser();\n    parserManager.registerParser(vtkParser);\n    const meshioParser = new MeshIOParser();\n    parserManager.registerParser(meshioParser);\n    const supportedFormat = parserManager.supportedFormat();\n    // Creating the widget factory to register it so the document manager knows about\n    // our new DocumentWidget\n    const widgetFactory = new JupyterViewWidgetFactory({\n        name: FACTORY,\n        modelName: 'jupyterview-model',\n        fileTypes: ['pvd', ...supportedFormat],\n        defaultFor: ['pvd', ...supportedFormat]\n    }, parserManager);\n    // Add the widget to the tracker when it's created\n    widgetFactory.widgetCreated.connect((sender, widget) => {\n        // Notify the instance tracker if restore data needs to update.\n        window.jupyterlabTheme = themeManager.theme;\n        widget.context.pathChanged.connect(() => {\n            tracker.save(widget);\n        });\n        themeManager.themeChanged.connect((_, changes) => widget.context.model.themeChanged.emit(changes));\n        tracker.add(widget);\n    });\n    app.docRegistry.addWidgetFactory(widgetFactory);\n    // Creating and registering the model factory for our custom DocumentModel\n    const modelFactory = new JupyterViewModelFactory();\n    app.docRegistry.addModelFactory(modelFactory);\n    // const vtkSharedModelFactory: SharedDocumentFactory = () => {\n    //   return new JupyterViewDoc();\n    // };\n    supportedFormat.forEach((fileType) => {\n        const FILETYPE = fileType.toUpperCase();\n        app.docRegistry.addFileType({\n            name: fileType,\n            displayName: FILETYPE,\n            mimeTypes: ['binary'],\n            extensions: [`.${fileType}`, `.${FILETYPE}`],\n            fileFormat: 'base64',\n            contentType: 'file'\n        });\n    });\n    app.docRegistry.addFileType({\n        name: 'pvd',\n        displayName: 'PVD',\n        mimeTypes: ['text'],\n        extensions: ['.pvd', '.PVD'],\n        fileFormat: 'text',\n        contentType: 'file'\n    });\n    // drive.sharedModelFactory.registerDocumentFactory(\n    //   'pvd',\n    //   vtkSharedModelFactory\n    // );\n    console.log('JupyterLab extension jupyterview is activated!');\n    shell.currentChanged.connect((shell, change) => {\n        const widget = change.newValue;\n        if (widget instanceof JupyterViewWidget) {\n            window.dispatchEvent(new Event('resize'));\n        }\n    });\n    return tracker;\n};\n/**\n * Initialization data for the jupyterview extension.\n */\nconst plugin = {\n    id: 'jupyterview:plugin',\n    autoStart: true,\n    requires: [ILayoutRestorer, IThemeManager, ILabShell],\n    provides: IJupyterViewDocTracker,\n    activate\n};\nconst controlPanel = {\n    id: 'jupyterview:controlpanel',\n    autoStart: true,\n    requires: [ILayoutRestorer, ILabShell, IJupyterViewDocTracker],\n    activate: (app, restorer, shell, tracker) => {\n        const controlPanel = new PanelWidget(tracker);\n        controlPanel.id = 'jupyterview::controlPanel';\n        controlPanel.title.caption = 'JupyterView Control Panel';\n        controlPanel.title.icon = jvcLightIcon;\n        if (restorer) {\n            restorer.add(controlPanel, NAME_SPACE);\n        }\n        app.shell.add(controlPanel, 'left');\n    }\n};\nexport default [plugin, controlPanel];\n","import { PageConfig } from '@jupyterlab/coreutils';\nlet basePath = PageConfig.getOption('baseUrl');\nif (!basePath) {\n    basePath = '/';\n}\nconst _public_path__ = basePath + 'lab/extensions/jupyterview/static/';\nconst itkConfig = {\n    itkModulesPath: _public_path__ + 'itk'\n};\nexport default itkConfig;\n","import { find } from '@lumino/algorithm';\nimport { UUID } from '@lumino/coreutils';\nconst KERNEL_NAME = 'JupyterView Kernel';\nexport class KernelExecutor {\n    constructor(options) {\n        this.options = options;\n        this._kernelStarted = false;\n    }\n    async startKernel() {\n        var _a;\n        if (this._kernelStarted) {\n            return;\n        }\n        const sessionManager = this.options.manager.sessions;\n        await sessionManager.ready;\n        await sessionManager.refreshRunning();\n        const model = find(sessionManager.running(), item => {\n            return item.name === KERNEL_NAME;\n        });\n        if (model) {\n            this._sessionConnection = sessionManager.connectTo({ model });\n        }\n        else {\n            await this.options.manager.kernelspecs.ready;\n            const specs = this.options.manager.kernelspecs.specs;\n            this._sessionConnection = await sessionManager.startNew({\n                name: KERNEL_NAME,\n                path: UUID.uuid4(),\n                kernel: {\n                    name: specs.default\n                },\n                type: 'notebook'\n            });\n            const kernelModel = {\n                name: specs.kernelspecs[specs.default].name\n            };\n            await this._sessionConnection.changeKernel(kernelModel);\n        }\n        (_a = this._sessionConnection.kernel) === null || _a === void 0 ? void 0 : _a.disposed.connect(() => (this._kernelStarted = false));\n        this._kernelStarted = true;\n    }\n    codeGenerator(filePath) {\n        if (filePath.startsWith('RTC:')) {\n            filePath = filePath.split(':')[1];\n        }\n        const writeFile = `\n      try:\n        import piplite\n        await piplite.install('meshio')\n      except:\n        pass\n      import base64,  meshio, tempfile \n      mesh = meshio.read(\"${filePath}\")\n      c = tempfile.NamedTemporaryFile(delete=False)\n      try:\n        ext = 0\n        mesh.write(c.name,'vtu')\n      except:\n        ext = 1\n        mesh.write(c.name,'vtk')\n      with open(c.name,'rb') as f:\n          content = f.read()\n      c.close()\n      try:\n        os.remove(\"${filePath}\")\n        os.remove(c.name)\n      except:\n        pass\n      base64_bytes = base64.b64encode(content)\n      {ext: base64_bytes}\n      `;\n        return writeFile;\n    }\n    fileGenerator(filePath, content) {\n        const ext = filePath.split('.').pop();\n        const code = `\n    import base64, tempfile\n    tempPath = tempfile.NamedTemporaryFile(suffix=\".${ext}\",delete=False)\n    message = \"\"\"${content}\"\"\"\n    base64_bytes = message.encode('ascii')\n    message_bytes = base64.b64decode(base64_bytes)\n    with open(tempPath.name, 'wb') as f:\n      f.write(message_bytes)\n    tempPath.name\n    `;\n        return { ext, code };\n    }\n    async executeCode(code) {\n        var _a;\n        const kernel = (_a = this._sessionConnection) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        return new Promise((resolve, reject) => {\n            const future = kernel.requestExecute(code, false, undefined);\n            future.onIOPub = (msg) => {\n                const msgType = msg.header.msg_type;\n                if (msgType === 'execute_result') {\n                    const content = msg.content.data['text/plain'];\n                    resolve(content);\n                }\n                else if (msgType === 'error') {\n                    console.error('Kernel operation failed', msg.content);\n                    reject(msg.content);\n                }\n            };\n        });\n    }\n    async convertFile(filePath, fileContent) {\n        var _a;\n        const stopOnError = true;\n        let path = filePath;\n        const kernel = (_a = this._sessionConnection) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        if (this.options.jupyterLite) {\n            const fileGeneratorCode = this.fileGenerator(filePath, fileContent);\n            const tempPath = await this.executeCode({ code: fileGeneratorCode.code });\n            path = tempPath.slice(1, -1);\n        }\n        const code = this.codeGenerator(path);\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const promise = this.executeCode(content).then(content => {\n            const type = content[1] === '0' ? 'vtu' : 'vtk';\n            const binary = content.slice(6, -2);\n            return { type, binary };\n        });\n        return promise;\n    }\n    dispose() {\n        this._sessionConnection.dispose();\n    }\n}\n","import * as React from 'react';\nimport { focusViewIcon, rotateLeftIcon, rotateRightIcon } from '../tools';\nexport class CameraToolbar extends React.Component {\n    render() {\n        return (React.createElement(\"div\", { className: \"jpview-view-toolbar\" },\n            React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button dark\", title: \"Reset zoom level\", onClick: this.props.resetCamera },\n                React.createElement(\"span\", null,\n                    React.createElement(focusViewIcon.react, null))),\n            React.createElement(\"span\", null),\n            \" \",\n            React.createElement(\"span\", null),\n            React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button dark\", title: \"Rotate camera left 90\\u00B0\", onClick: this.props.rotateHandler('left') },\n                React.createElement(\"span\", null,\n                    React.createElement(rotateLeftIcon.react, null))),\n            ' ',\n            React.createElement(\"span\", null),\n            React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button dark\", title: \"Rotate camera right 90\\u00B0\", onClick: this.props.rotateHandler('right') },\n                React.createElement(\"span\", null,\n                    React.createElement(rotateRightIcon.react, null))),\n            ' ',\n            React.createElement(\"span\", null),\n            React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button dark\", title: \"Move camera to X-Direction\", onClick: () => this.props.updateOrientation('x') },\n                React.createElement(\"span\", null, \"X\")),\n            ' ',\n            React.createElement(\"span\", null),\n            React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button dark\", title: \"Move camera to Y-Direction\", onClick: () => this.props.updateOrientation('y') },\n                React.createElement(\"span\", null, \"Y\")),\n            ' ',\n            React.createElement(\"span\", null),\n            React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button dark\", title: \"Move camera to Z-Direction\", onClick: () => this.props.updateOrientation('z') },\n                React.createElement(\"span\", null, \"Z\"))));\n    }\n}\n","import { ABCWidgetFactory } from '@jupyterlab/docregistry';\nimport { JupyterViewModel } from './model';\nimport { JupyterViewPanel, JupyterViewWidget } from './widget';\nexport class JupyterViewWidgetFactory extends ABCWidgetFactory {\n    constructor(options, parsers) {\n        super(options);\n        this.parsers = parsers;\n    }\n    /**\n     * Create a new widget given a context.\n     *\n     * @param context Contains the information of the file\n     * @returns The widget\n     */\n    createNewWidget(context) {\n        return new JupyterViewWidget({\n            context,\n            content: new JupyterViewPanel(context, this.parsers)\n        });\n    }\n}\n/**\n * A Model factory to create new instances of JupyterViewModel.\n */\nexport class JupyterViewModelFactory {\n    constructor() {\n        this._disposed = false;\n    }\n    /**\n     * The name of the model.\n     *\n     * @returns The name\n     */\n    get name() {\n        return 'jupyterview-model';\n    }\n    /**\n     * The content type of the file.\n     *\n     * @returns The content type\n     */\n    get contentType() {\n        return 'file';\n    }\n    /**\n     * The format of the file.\n     *\n     * @returns the file format\n     */\n    get fileFormat() {\n        return 'base64';\n    }\n    /**\n     * Get whether the model factory has been disposed.\n     *\n     * @returns disposed status\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose the model factory.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Get the preferred language given the path on the file.\n     *\n     * @param path path of the file represented by this document model\n     * @returns The preferred language\n     */\n    preferredLanguage(path) {\n        return '';\n    }\n    /**\n     * Create a new instance of JupyterViewModel.\n     */\n    createNew(options) {\n        const model = new JupyterViewModel(options);\n        return model;\n    }\n}\n","import '@kitware/vtk.js/Rendering/OpenGL/Profiles/All';\nimport readPolyDataArrayBuffer from 'itk/readPolyDataArrayBuffer';\nimport * as React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { ContentsManager } from '@jupyterlab/services';\nimport * as vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport vtkWarpScalar from '@kitware/vtk.js/Filters/General/WarpScalar';\nimport vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport { ColorMode, ScalarMode } from '@kitware/vtk.js/Rendering/Core/Mapper/Constants';\nimport vtkScalarBarActor from '@kitware/vtk.js/Rendering/Core/ScalarBarActor';\nimport vtkRenderWindowWithControlBar from '@kitware/vtk.js/Rendering/Misc/RenderWindowWithControlBar';\nimport vtk from '@kitware/vtk.js/vtk';\nimport vtkWidgetManager from '@kitware/vtk.js/Widgets/Core/WidgetManager';\nimport vtkInteractiveOrientationWidget from '@kitware/vtk.js/Widgets/Widgets3D/InteractiveOrientationWidget';\nimport { b64_to_utf8, convertPath, debounce, majorAxis, moveCamera, VIEW_ORIENTATIONS } from '../tools';\nimport { CameraToolbar } from './cameraToolbar';\nimport { BG_COLOR, JUPYTER_FONT, LIGHT_THEME, OBJECT_COLOR, ROTATION_STEP } from './utils';\nexport class MainView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleThemeChange = (newTheme) => {\n            this.setState(old => ({ ...old, theme: newTheme }), () => {\n                const style = this.state.theme === LIGHT_THEME\n                    ? { fontColor: 'rgba(0, 0, 0, 0.87)' }\n                    : { fontColor: 'rgba(255, 255, 255, 0.87)' };\n                this._scalarBarActor.setTickTextStyle(style);\n                this._scalarBarActor.setAxisTextStyle(style);\n                this._actor.getProperty().setColor(...OBJECT_COLOR[this.state.theme]);\n            });\n        };\n        this.mainViewStateChanged = (_, changed) => {\n            if (changed.camera) {\n                if (!this._mouseDown) {\n                    const camera = changed.camera;\n                    this._camera.set(camera);\n                    this._renderer.resetCameraClippingRange();\n                    this._renderWindow.render();\n                }\n            }\n        };\n        this.controlStateChanged = (_, changed) => {\n            let needRerender = false;\n            if (changed.selectedColor) {\n                this.updateColorBy(changed.selectedColor);\n            }\n            if (changed.colorSchema) {\n                this.applyPreset({ colorSchema: changed.colorSchema });\n            }\n            if (changed.modifiedDataRange) {\n                this.applyPreset({\n                    colorSchema: this._sharedModel.getControlViewStateByKey('colorSchema'),\n                    dataRange: changed.modifiedDataRange\n                });\n            }\n            if (changed.displayMode) {\n                const [visibility, representation, edgeVisibility] = changed.displayMode\n                    .split(':')\n                    .map(Number);\n                this._actor.getProperty().set({ representation, edgeVisibility });\n                this._actor.setVisibility(!!visibility);\n                needRerender = true;\n            }\n            if (changed.opacity) {\n                this._actor.getProperty().setOpacity(changed.opacity);\n                needRerender = true;\n            }\n            if (changed.warpFactor || changed.warpFactor === 0) {\n                const value = Number(changed.warpFactor);\n                this._warpScalar.setScaleFactor(value);\n                this._mapper.setInputData(this._warpScalar.getOutputData());\n                needRerender = true;\n            }\n            if (changed.selectedWarp) {\n                const [location, colorByArrayName] = changed.selectedWarp.split(':');\n                if (location === '') {\n                    this._warpScalar.setScaleFactor(0);\n                }\n                else {\n                    this._warpScalar.setInputArrayToProcess(0, colorByArrayName, location);\n                }\n                this._mapper.setInputData(this._warpScalar.getOutputData());\n                needRerender = true;\n            }\n            if (changed.warpNormalAxis) {\n                this._warpScalar.setNormal(changed.warpNormalAxis);\n                this._warpScalar.update();\n                this._mapper.setInputData(this._warpScalar.getOutputData());\n                needRerender = true;\n            }\n            if (changed.selectedDataset) {\n                this._source = this._fileData[changed.selectedDataset];\n                this._warpScalar.setInputData(this._source);\n                this._mapper.setInputData(this._warpScalar.getOutputData());\n                needRerender = true;\n            }\n            if (needRerender) {\n                setTimeout(() => this._renderWindow.render(), 50);\n            }\n        };\n        this.updateColorBy = (color) => {\n            const [location, colorByArrayName, indexValue] = color.split(':');\n            const interpolateScalarsBeforeMapping = location === 'PointData';\n            let colorMode = ColorMode.DEFAULT;\n            let scalarMode = ScalarMode.DEFAULT;\n            const scalarVisibility = location.length > 0;\n            if (scalarVisibility) {\n                const newArray = this._source[`get${location}`]().getArrayByName(colorByArrayName);\n                const selectedComp = parseInt(indexValue);\n                this._activeArray = newArray;\n                const newDataRange = this._activeArray.getRange(selectedComp);\n                this._dataRange[0] = newDataRange[0];\n                this._dataRange[1] = newDataRange[1];\n                if (this._dataRange[0] === this._dataRange[1]) {\n                    this._dataRange[1] = this._dataRange[0] + 0.0000000001;\n                }\n                this._sharedModel.transact(() => {\n                    this._sharedModel.setMainViewState({ dataRange: [...this._dataRange] });\n                });\n                colorMode = ColorMode.MAP_SCALARS;\n                scalarMode =\n                    location === 'PointData'\n                        ? ScalarMode.USE_POINT_FIELD_DATA\n                        : ScalarMode.USE_CELL_FIELD_DATA;\n                if (this._mapper.getLookupTable()) {\n                    const lut = this._mapper.getLookupTable();\n                    if (selectedComp === -1) {\n                        lut.setVectorModeToMagnitude();\n                    }\n                    else {\n                        lut.setVectorModeToComponent();\n                        lut.setVectorComponent(selectedComp);\n                    }\n                }\n            }\n            this._scalarBarActor.setAxisLabel(colorByArrayName);\n            this._scalarBarActor.setVisibility(true);\n            this._mapper.set({\n                colorByArrayName,\n                colorMode,\n                interpolateScalarsBeforeMapping,\n                scalarMode,\n                scalarVisibility\n            });\n            this.applyPreset({\n                colorSchema: this._sharedModel.getControlViewStateByKey('colorSchema')\n            });\n        };\n        this.applyPreset = (options) => {\n            if (!options.colorSchema) {\n                options.colorSchema = 'erdc_rainbow_bright';\n            }\n            if (!options.dataRange) {\n                options.dataRange = this._dataRange;\n            }\n            const preset = vtkColorMaps.getPresetByName(options.colorSchema);\n            this._lookupTable.applyColorMap(preset);\n            this._lookupTable.setMappingRange(options.dataRange[0], options.dataRange[1]);\n            this._lookupTable.updateRange();\n            setTimeout(() => this._renderWindow.render(), 250);\n        };\n        this.createComponentSelector = () => {\n            const pointDataArray = this._source.getPointData().getArrays();\n            const option = [\n                { value: ':', label: 'Solid color' }\n            ];\n            pointDataArray.forEach((a) => {\n                const name = a.getName();\n                const numberComp = a.getNumberOfComponents();\n                option.push({\n                    label: `${name}`,\n                    value: `PointData:${name}:-1`\n                });\n                if (numberComp > 1) {\n                    for (let index = 0; index < numberComp; index++) {\n                        option.push({\n                            label: `${name} - ${index}`,\n                            value: `PointData:${name}:${index}`\n                        });\n                    }\n                }\n            });\n            const cellDataArray = this._source.getCellData().getArrays();\n            cellDataArray.forEach((a) => {\n                const name = a.getName();\n                const numberComp = a.getNumberOfComponents();\n                option.push({\n                    label: `${name}`,\n                    value: `CellData:${name}:-1`\n                });\n                for (let index = 0; index < numberComp; index++) {\n                    option.push({\n                        label: `${name} ${index}`,\n                        value: `CellData:${name}:${index}`\n                    });\n                }\n            });\n            return option;\n        };\n        this.createPipeline = (polyResult) => {\n            this._lookupTable = vtkColorTransferFunction.newInstance();\n            this._mapper = vtkMapper.newInstance({\n                interpolateScalarsBeforeMapping: true,\n                useLookupTableScalarRange: true,\n                scalarVisibility: false\n            });\n            this._mapper.setLookupTable(this._lookupTable);\n            this._actor = vtkActor.newInstance();\n            this._actor.setMapper(this._mapper);\n            this._actor.getProperty().setColor(...OBJECT_COLOR[this.state.theme]);\n            this._lookupTable.onModified(() => {\n                this._renderWindow.render();\n            });\n            this._source = polyResult;\n            this._warpScalar = vtkWarpScalar.newInstance({\n                scaleFactor: 0,\n                useNormal: true\n            });\n            this._warpScalar.setNormal([0, 0, 1]);\n            this._warpScalar.setInputData(this._source);\n            const scalars = this._source.getPointData().getScalars();\n            this._dataRange = scalars\n                ? [scalars.getRange().min, scalars.getRange().max]\n                : [0, 1];\n            if (!this._sharedModel.getContent('mainViewState')) {\n                const colorByOptions = this.createComponentSelector();\n                this._sharedModel.setMainViewState({\n                    colorByOptions,\n                    dataRange: [...this._dataRange]\n                });\n            }\n            const fontColor = this.state.theme === LIGHT_THEME\n                ? 'rgba(0, 0, 0, 0.87)'\n                : 'rgba(255, 255, 255, 0.87)';\n            this._scalarBarActor = vtkScalarBarActor.newInstance();\n            this._scalarBarActor.setAxisTextStyle({\n                fontColor,\n                fontFamily: JUPYTER_FONT,\n                fontSize: '18px'\n            });\n            this._scalarBarActor.setTickTextStyle({\n                fontColor,\n                fontFamily: JUPYTER_FONT,\n                fontSize: '12px'\n            });\n            this._scalarBarActor.setScalarsToColors(this._mapper.getLookupTable());\n            this._scalarBarActor.setVisibility(false);\n            this._scalarBarActor.setDrawNanAnnotation(false);\n            this._mapper.setInputData(this._warpScalar.getOutputData());\n            // this._mapper.setInputData(this._source);\n            this._renderer.addActor(this._scalarBarActor);\n            this._renderer.addActor(this._actor);\n            this._renderer.resetCamera();\n            const currentState = this._sharedModel.getControlViewState();\n            if (Object.keys(currentState).length > 0) {\n                this.controlStateChanged(null, currentState);\n            }\n            else {\n                this._renderWindow.render();\n            }\n        };\n        this.rotate = (angle) => {\n            const camera = this._renderer.getActiveCamera();\n            const focalPoint = camera.getFocalPoint();\n            const position = camera.getPosition();\n            const viewUp = camera.getViewUp();\n            const axis = [\n                focalPoint[0] - position[0],\n                focalPoint[1] - position[1],\n                focalPoint[2] - position[2]\n            ];\n            vtkMatrixBuilder\n                .buildFromDegree()\n                .rotate(Number.isNaN(angle) ? 90 : angle, axis)\n                .apply(viewUp);\n            camera.setViewUp(...viewUp);\n            camera.modified();\n            // model.orientationWidget.updateMarkerOrientation();\n            this._renderWindow.render();\n        };\n        this.rotateWithAnimation = (direction) => {\n            const sign = direction === 'left' ? 1 : -1;\n            return () => {\n                const interactor = this._renderWindow.getInteractor();\n                interactor.requestAnimation(this._renderWindow);\n                let count = 0;\n                let intervalId = undefined;\n                const rotate = () => {\n                    if (count < 90) {\n                        count += ROTATION_STEP;\n                        this.rotate(sign * ROTATION_STEP);\n                    }\n                    else {\n                        clearInterval(intervalId);\n                        interactor.cancelAnimation(this._renderWindow);\n                        this._syncCamera();\n                    }\n                };\n                intervalId = setInterval(rotate, 8);\n            };\n        };\n        this.updateOrientation = (mode) => {\n            if (!this._inAnimation) {\n                this._inAnimation = true;\n                const { axis, orientation, viewUp } = VIEW_ORIENTATIONS[mode];\n                // const axisIndex  = VIEW_ORIENTATIONS[mode].axis\n                const animateSteps = 100;\n                const interactor = this._renderWindow.getInteractor();\n                const camera = this._renderer.getActiveCamera();\n                const originalPosition = camera.getPosition();\n                const originalViewUp = camera.getViewUp();\n                const originalFocalPoint = camera.getFocalPoint();\n                const model = { axis, orientation, viewUp: viewUp };\n                const position = camera.getFocalPoint();\n                position[model.axis] += model.orientation;\n                camera.setPosition(...position);\n                camera.setViewUp(...model.viewUp);\n                this._renderer.resetCamera();\n                const destFocalPoint = camera.getFocalPoint();\n                const destPosition = camera.getPosition();\n                const destViewUp = camera.getViewUp();\n                // Reset to original to prevent initial render flash\n                camera.setFocalPoint(...originalFocalPoint);\n                camera.setPosition(...originalPosition);\n                camera.setViewUp(...originalViewUp);\n                moveCamera(camera, this._renderer, interactor, destFocalPoint, destPosition, destViewUp, animateSteps).then(() => {\n                    this._inAnimation = false;\n                    this._syncCamera();\n                });\n            }\n        };\n        this.resetCamera = () => {\n            this._renderer.resetCamera();\n            this._renderer.resetCameraClippingRange();\n            setTimeout(this._renderWindow.render, 0);\n            this._syncCamera();\n        };\n        this._inAnimation = false;\n        this._mouseDown = false;\n        this._syncCamera = debounce(() => {\n            const position = this._camera.getPosition();\n            const focalPoint = this._camera.getFocalPoint();\n            const viewUp = this._camera.getViewUp();\n            this._sharedModel.setMainViewState({\n                camera: { position, focalPoint, viewUp }\n            });\n        }, 100);\n        const theme = (window.jupyterlabTheme ||\n            LIGHT_THEME);\n        this.state = {\n            id: uuid(),\n            theme,\n            loading: true,\n            colorOption: [],\n            counter: 0\n        };\n        this._context = props.context;\n        this._sharedModel = props.context.model.sharedModel;\n        this.container = React.createRef();\n        this._fileData = {};\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            const rootContainer = this.container.current;\n            this._fullScreenRenderer = vtkRenderWindowWithControlBar.newInstance({\n                controlSize: 0\n            });\n            this._fullScreenRenderer.setContainer(rootContainer);\n            this._renderer = this._fullScreenRenderer.getRenderer();\n            this._renderer.setBackground([0, 0, 0, 0]);\n            this._renderWindow = this._fullScreenRenderer.getRenderWindow();\n            const axes = vtkAxesActor.newInstance();\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor: axes,\n                interactor: this._renderWindow.getInteractor()\n            });\n            orientationWidget.setEnabled(true);\n            orientationWidget.setViewportSize(0.15);\n            orientationWidget.setMinPixelSize(100);\n            orientationWidget.setMaxPixelSize(300);\n            const camera = (this._camera = this._renderer.getActiveCamera());\n            const widgetManager = vtkWidgetManager.newInstance();\n            widgetManager.setRenderer(orientationWidget.getRenderer());\n            const widget = vtkInteractiveOrientationWidget.newInstance();\n            widget.placeWidget(axes.getBounds());\n            widget.setBounds(axes.getBounds());\n            widget.setPlaceFactor(1);\n            const vw = widgetManager.addWidget(widget);\n            vw.onOrientationChange(({ up, direction, action, event }) => {\n                const focalPoint = camera.getFocalPoint();\n                const position = camera.getPosition();\n                const viewUp = camera.getViewUp();\n                const distance = Math.sqrt(vtkMath.distance2BetweenPoints(position, focalPoint));\n                camera.setPosition(focalPoint[0] + direction[0] * distance, focalPoint[1] + direction[1] * distance, focalPoint[2] + direction[2] * distance);\n                let axis = [];\n                if (direction[0]) {\n                    axis = majorAxis(viewUp, 1, 2);\n                }\n                if (direction[1]) {\n                    axis = majorAxis(viewUp, 0, 2);\n                }\n                if (direction[2]) {\n                    axis = majorAxis(viewUp, 0, 1);\n                }\n                camera.setViewUp(axis[0], axis[1], axis[2]);\n                orientationWidget.updateMarkerOrientation();\n                widgetManager.enablePicking();\n                this._renderWindow.render();\n                this._syncCamera();\n            });\n            this._renderer.resetCamera();\n            widgetManager.enablePicking();\n            this._renderWindow.render();\n            const interactor = this._fullScreenRenderer.getInteractor();\n            document\n                .querySelector('body')\n                .removeEventListener('keypress', interactor.handleKeyPress);\n            document\n                .querySelector('body')\n                .removeEventListener('keydown', interactor.handleKeyDown);\n            document\n                .querySelector('body')\n                .removeEventListener('keyup', interactor.handleKeyUp);\n            this._context.ready.then(() => {\n                this._model = this._context.model;\n                this._kernel = this._model.getKernel();\n                this._model.themeChanged.connect((_, arg) => {\n                    this.handleThemeChange(arg.newValue);\n                });\n                this._sharedModel.controlViewStateChanged.connect(this.controlStateChanged);\n                this._sharedModel.mainViewStateChanged.connect(this.mainViewStateChanged);\n                const fullPath = convertPath(this._context.path);\n                const dirPath = fullPath.substring(0, fullPath.lastIndexOf('/') + 1);\n                const fileName = fullPath.replace(/^.*(\\\\|\\/|:)/, '');\n                const fileContent = this._sharedModel.getContent('content');\n                const contentPromises = this.prepareFileContent(dirPath, fileName, fileContent);\n                let counter = 0;\n                const entries = Object.entries(contentPromises);\n                const totalItems = entries.length;\n                const firstName = entries[0][0];\n                const fileList = Object.keys(contentPromises);\n                for (const [path, promise] of entries) {\n                    const name = path.split('::')[0];\n                    promise.then(vtkParsedContent => {\n                        this.stringToPolyData(vtkParsedContent.binary, `${name}.${vtkParsedContent.type}`)\n                            .then(polyResult => {\n                            counter = Math.round(counter + 100 / totalItems);\n                            this._fileData[path] = vtk(polyResult.polyData);\n                            polyResult.webWorker.terminate();\n                            if (counter >= 99) {\n                                this.createPipeline(this._fileData[firstName]);\n                                this.setState(old => ({ ...old, loading: false, counter }));\n                                this._sharedModel.setMainViewState({ fileList });\n                            }\n                            else {\n                                this.setState(old => ({ ...old, counter }));\n                            }\n                        })\n                            .catch(e => {\n                            throw e;\n                        });\n                    });\n                }\n                const renderContainer = this._fullScreenRenderer.getRenderWindowContainer();\n                renderContainer.addEventListener('mousedown', event => {\n                    this._mouseDown = true;\n                });\n                renderContainer.addEventListener('mouseup', event => {\n                    this._mouseDown = false;\n                });\n                renderContainer.addEventListener('mousemove', (event) => {\n                    if (this._mouseDown) {\n                        this._syncCamera();\n                    }\n                });\n                renderContainer.addEventListener('wheel', (event) => {\n                    this._syncCamera();\n                });\n            });\n        }, 500);\n    }\n    prepareFileContent(filePath, fileName, fileContent) {\n        const pathList = fileName.split('.');\n        const ext = pathList[pathList.length - 1];\n        const promises = {};\n        if (ext.toLowerCase() === 'pvd') {\n            if (filePath.startsWith('RTC:')) {\n                filePath = filePath.split(':')[1];\n            }\n            const xmlStr = b64_to_utf8(fileContent);\n            const xmlParser = new DOMParser();\n            const doc = xmlParser.parseFromString(xmlStr, 'application/xml');\n            const contents = new ContentsManager();\n            doc.querySelectorAll('DataSet').forEach(item => {\n                const timeStep = item.getAttribute('timestep');\n                const vtuPath = item.getAttribute('file');\n                const content = contents\n                    .get(`${filePath}/${vtuPath}`, {\n                    format: 'base64',\n                    content: true,\n                    type: 'file'\n                })\n                    .then(iModel => ({ type: 'vtu', binary: iModel.content }));\n                promises[`${vtuPath}::${filePath}::${timeStep}`] = content;\n            });\n            return promises;\n        }\n        else {\n            const fileExt = ext.toLowerCase();\n            const path = `${filePath}${fileName}`;\n            const parser = this.props.parsers.getParser(fileExt);\n            if (!parser) {\n                throw Error('Parser not found');\n            }\n            const content = parser.readFile(fileContent, fileExt, path, this._kernel);\n            let output;\n            if (parser.nativeSupport) {\n                output = `${fileName}::${filePath}::0::${fileName}`;\n            }\n            else {\n                output = `${fileName}.vtk::${filePath}::0::${fileName}`;\n            }\n            return { [output]: content };\n        }\n        // return { [`${fileName}::${filePath}::0`]: Promise.resolve(fileContent) };\n    }\n    async stringToPolyData(fileContent, filePath) {\n        const str = `data:application/octet-stream;base64,${fileContent}`;\n        return fetch(str)\n            .then(b => b.arrayBuffer())\n            .then(buff => readPolyDataArrayBuffer(null, buff, filePath, ''))\n            .then(polyResult => {\n            polyResult.webWorker.terminate();\n            return polyResult;\n        });\n    }\n    render() {\n        return (React.createElement(\"div\", { style: {\n                width: '100%',\n                height: 'calc(100%)'\n            } },\n            React.createElement(\"div\", { className: 'jpview-Spinner', style: { display: this.state.loading ? 'flex' : 'none' } },\n                React.createElement(\"div\", { className: 'jpview-SpinnerContent' }),\n                React.createElement(\"p\", { style: {\n                        position: 'relative',\n                        right: '50%',\n                        fontSize: 'var(--jp-ui-font-size2)',\n                        color: '#27b9f3'\n                    } }, `${this.state.counter}%`)),\n            React.createElement(\"div\", { ref: this.container, style: {\n                    width: '100%',\n                    height: 'calc(100%)',\n                    background: BG_COLOR[this.state.theme] //'radial-gradient(#efeded, #8f9091)'\n                } }),\n            React.createElement(CameraToolbar, { rotateHandler: this.rotateWithAnimation, resetCamera: this.resetCamera, updateOrientation: this.updateOrientation })));\n    }\n}\n","import { Signal } from '@lumino/signaling';\nimport { YDocument } from '@jupyter/ydoc';\nexport class JupyterViewModel {\n    constructor(options) {\n        this.collaborative = false;\n        this._onCameraChanged = () => {\n            const clients = this.sharedModel.awareness.getStates();\n            this._cameraChanged.emit(clients);\n        };\n        this.defaultKernelName = '';\n        this.defaultKernelLanguage = '';\n        this._dirty = false;\n        this._readOnly = true;\n        this._isDisposed = false;\n        this._contentChanged = new Signal(this);\n        this._stateChanged = new Signal(this);\n        this._themeChanged = new Signal(this);\n        this._cameraChanged = new Signal(this);\n        const { sharedModel } = options;\n        if (sharedModel) {\n            this._sharedModel = sharedModel;\n        }\n        else {\n            this._sharedModel = JupyterViewDoc.create();\n        }\n        this._sharedModel.awareness.on('change', this._onCameraChanged);\n    }\n    get sharedModel() {\n        return this._sharedModel;\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    get contentChanged() {\n        return this._contentChanged;\n    }\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    get themeChanged() {\n        return this._themeChanged;\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    get dirty() {\n        return this._dirty;\n    }\n    set dirty(value) {\n        this._dirty = value;\n    }\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        this._readOnly = true;\n    }\n    toString() {\n        const content = this.sharedModel.getContent('content');\n        if (content && content.length > 0) {\n            return content;\n        }\n        else {\n            throw Error('Content not found');\n        }\n    }\n    fromString(data) {\n        this.sharedModel.transact(() => {\n            this.sharedModel.setContent('content', data);\n        });\n    }\n    toJSON() {\n        return {};\n    }\n    fromJSON(data) {\n        /** */\n    }\n    initialize() {\n        this.sharedModel.setContent('backup', this.sharedModel.getContent('content'));\n    }\n    syncCamera(pos) {\n        this.sharedModel.awareness.setLocalStateField('mouse', pos);\n    }\n    getClientId() {\n        return this.sharedModel.awareness.clientID;\n    }\n    get cameraChanged() {\n        return this._cameraChanged;\n    }\n    getKernel() {\n        return JupyterViewModel.kernel;\n    }\n}\nexport class JupyterViewDoc extends YDocument {\n    constructor() {\n        super();\n        /**\n         * Document version\n         */\n        this.version = '1.0.0';\n        this._mainViewStateObserver = (event) => {\n            const changes = {};\n            event.keysChanged.forEach(key => {\n                changes[key] = this.getMainViewStateByKey(key);\n            });\n            this._mainViewStateChanged.emit(changes);\n        };\n        this._controlViewStateObserver = (event) => {\n            const changes = {};\n            event.keysChanged.forEach(key => {\n                changes[key] = this.getControlViewStateByKey(key);\n            });\n            this._controlViewStateChanged.emit(changes);\n        };\n        this._mainViewStateChanged = new Signal(this);\n        this._controlViewStateChanged = new Signal(this);\n        this._content = this.ydoc.getMap('content');\n        this._mainViewState = this.ydoc.getMap('mainViewState');\n        this._mainViewState.observe(this._mainViewStateObserver);\n        this._controlViewState = this.ydoc.getMap('controlViewState');\n        this._controlViewState.observe(this._controlViewStateObserver);\n    }\n    dispose() {\n        this._mainViewState.unobserve(this._mainViewStateObserver);\n        this._controlViewState.unobserve(this._controlViewStateObserver);\n    }\n    getSource() {\n        return this._content.toJSON();\n    }\n    setSource(source) {\n        let value;\n        if (!source) {\n            return;\n        }\n        if (typeof source === 'string') {\n            value = JSON.parse(source);\n        }\n        else {\n            value = source;\n        }\n        this.transact(() => {\n            Object.entries(value).forEach(([key, value]) => {\n                this._content.set(key, value);\n            });\n        });\n    }\n    static create() {\n        return new JupyterViewDoc();\n    }\n    get mainViewStateChanged() {\n        return this._mainViewStateChanged;\n    }\n    get controlViewStateChanged() {\n        return this._controlViewStateChanged;\n    }\n    getContent(key) {\n        return this._content.get(key);\n    }\n    setContent(key, value) {\n        this._content.set(key, value);\n    }\n    getMainViewState() {\n        const ret = {};\n        for (const key of this._mainViewState.keys()) {\n            ret[key] = this._mainViewState.get(key);\n        }\n        return ret;\n    }\n    getMainViewStateByKey(key) {\n        return this._mainViewState.get(key);\n    }\n    setMainViewState(payload) {\n        this.transact(() => {\n            for (const key in payload) {\n                this._mainViewState.set(key, payload[key]);\n            }\n        });\n    }\n    getControlViewState() {\n        const ret = {};\n        for (const key of this._controlViewState.keys()) {\n            ret[key] = this._controlViewState.get(key);\n        }\n        return ret;\n    }\n    getControlViewStateByKey(key) {\n        return this._controlViewState.get(key);\n    }\n    setControlViewState(payload) {\n        this.transact(() => {\n            for (const key in payload) {\n                this._controlViewState.set(key, payload[key]);\n            }\n        });\n    }\n}\n","export const DARK_THEME = 'JupyterLab Dark';\nexport const LIGHT_THEME = 'JupyterLab Light';\n//linear-gradient(rgb(0, 0, 42), rgb(82, 87, 110))\nconst DARK_BG = 'linear-gradient(var(--jp-layout-color2), var(--jp-layout-color4))';\nconst LIGHT_BG = 'linear-gradient(var(--jp-layout-color4), var(--jp-layout-color2))';\nexport const BG_COLOR = {\n    [DARK_THEME]: DARK_BG,\n    [LIGHT_THEME]: LIGHT_BG //'linear-gradient(#000028, #ffffff)'\n};\nexport const OBJECT_COLOR = {\n    [DARK_THEME]: [0.9, 0.9, 0.9],\n    [LIGHT_THEME]: [0.8, 0.8, 0.8] //'linear-gradient(#000028, #ffffff)'\n};\nexport const ROTATION_STEP = 2;\nexport const JUPYTER_FONT = \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'\";\n","import { DocumentWidget } from '@jupyterlab/docregistry';\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nimport { MainView } from './mainview';\nexport class JupyterViewWidget extends DocumentWidget {\n    constructor(options) {\n        super(options);\n        this.onResize = (msg) => {\n            window.dispatchEvent(new Event('resize'));\n        };\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this.content.dispose();\n        super.dispose();\n        setTimeout(() => window.dispatchEvent(new Event('resize')), 100);\n    }\n}\nexport class JupyterViewPanel extends ReactWidget {\n    /**\n     * Construct a `ExamplePanel`.\n     *\n     * @param context - The documents context.\n     */\n    constructor(context, parsers) {\n        super();\n        this.parsers = parsers;\n        this.addClass('jp-jupyterview-panel');\n        this._context = context;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        Signal.clearData(this);\n        super.dispose();\n    }\n    render() {\n        return React.createElement(MainView, { context: this._context, parsers: this.parsers });\n    }\n}\n","import * as React from 'react';\nimport { refreshIcon, LabIcon } from '@jupyterlab/ui-components';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport { selectorFactory } from '../tools';\nexport default class ColorPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.rangeSettingComponent = () => {\n            let dataRangeBlock = React.createElement(\"div\", null);\n            if (this.props.controlViewState.modifiedDataRange) {\n                const step = (this.props.controlViewState.modifiedDataRange[1] -\n                    this.props.controlViewState.modifiedDataRange[0]) /\n                    100;\n                dataRangeBlock = (React.createElement(\"div\", { className: \"jpview-input-wrapper\" },\n                    React.createElement(\"div\", { style: { width: '40%' } },\n                        React.createElement(\"label\", null, \"Min\"),\n                        React.createElement(\"input\", { className: \"jpview-input\", type: \"number\", value: this.props.controlViewState.modifiedDataRange[0], onChange: e => this.props.onRangeChange('min', e.target.value), step: step })),\n                    React.createElement(\"div\", { style: {\n                            width: '15%',\n                            display: 'flex',\n                            flexDirection: 'column-reverse'\n                        } },\n                        React.createElement(\"button\", { className: \"jp-Button jpview-toolbar-button\", title: \"Reset range\", onClick: this.props.resetRange }, LabIcon.resolveReact({ icon: refreshIcon }))),\n                    React.createElement(\"div\", { style: { width: '40%' } },\n                        React.createElement(\"label\", null, \"Max\"),\n                        React.createElement(\"input\", { className: \"jpview-input\", type: \"number\", value: this.props.controlViewState.modifiedDataRange[1], onChange: e => this.props.onRangeChange('max', e.target.value), step: step }))));\n            }\n            return dataRangeBlock;\n        };\n        this.state = { clientId: this.props.clientId };\n        this._colorMapOptions = vtkColorMaps.rgbPresetNames.map(option => ({ value: option, label: option }));\n    }\n    render() {\n        var _a;\n        const colorSelectorData = (_a = this.props.mainViewState.colorByOptions) !== null && _a !== void 0 ? _a : [\n            { value: ':', label: 'Solid color' }\n        ];\n        return (React.createElement(\"div\", { className: \"jpview-control-panel-component\" },\n            selectorFactory({\n                defaultValue: this.props.controlViewState.selectedColor,\n                options: colorSelectorData,\n                onChange: this.props.onSelectedColorChange,\n                label: 'Color by'\n            }),\n            selectorFactory({\n                defaultValue: this.props.controlViewState.colorSchema,\n                options: this._colorMapOptions,\n                onChange: this.props.onColorSchemaChange,\n                label: 'Color map option'\n            }),\n            this.rangeSettingComponent()));\n    }\n}\n","import * as React from 'react';\nimport { selectorFactory } from '../tools';\nexport default class DatasetPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.switchDataset = (step = 1) => {\n            var _a;\n            const fileList = (_a = this.props.mainViewState.fileList) !== null && _a !== void 0 ? _a : [];\n            const length = fileList.length;\n            if (length < 2) {\n                return;\n            }\n            const current = this.props.controlViewState.selectedDataset;\n            const idx = fileList.indexOf(current);\n            if (idx === -1) {\n                return;\n            }\n            let next = idx + step;\n            if (next === length) {\n                next = 0;\n            }\n            else if (next < 0) {\n                next = length - 1;\n            }\n            this.props.onSelectDatasetChange(fileList[next]);\n        };\n        this.toggleAnimation = () => {\n            this.setState(old => {\n                const current = old.animating;\n                if (!current) {\n                    this._interval = setInterval(this.switchDataset, 200);\n                }\n                else {\n                    clearInterval(this._interval);\n                }\n                return { ...old, animating: !current };\n            });\n        };\n        this.state = {\n            clientId: this.props.clientId,\n            animating: false,\n            selectedDataset: ''\n        };\n    }\n    componentDidUpdate(oldProps, oldState) {\n        if (!this.props.clientId && oldState.animating) {\n            clearInterval(this._interval);\n            this.setState(old => ({\n                ...old,\n                animating: false\n            }));\n            return;\n        }\n        if (!oldState.clientId && this.props.clientId) {\n            this.setState(old => ({ ...old, clientId: this.props.clientId }));\n        }\n        else if (oldState.clientId &&\n            this.props.clientId &&\n            oldState.clientId !== this.props.clientId) {\n            if (this.state.animating) {\n                clearInterval(this._interval);\n            }\n            this.setState(old => ({\n                ...old,\n                clientId: this.props.clientId,\n                animating: false\n            }));\n        }\n    }\n    render() {\n        var _a, _b;\n        const fileList = ((_a = this.props.mainViewState.fileList) !== null && _a !== void 0 ? _a : ['None']).map(item => {\n            var _a;\n            const labelList = item.split('::');\n            return { label: (_a = labelList[3]) !== null && _a !== void 0 ? _a : labelList[0], value: item };\n        });\n        return (React.createElement(\"div\", { className: \"jpview-control-panel-component\" },\n            selectorFactory({\n                defaultValue: (_b = this.props.controlViewState.selectedDataset) !== null && _b !== void 0 ? _b : fileList[0].value,\n                options: fileList,\n                onChange: e => this.props.onSelectDatasetChange(e.target.value),\n                label: 'Dataset'\n            }),\n            React.createElement(\"div\", { style: {\n                    margin: '3px 3px 5px',\n                    display: 'flex',\n                    justifyContent: 'space-between'\n                } },\n                React.createElement(\"button\", { style: { width: '25%' }, className: \"jpview-button\", title: \"Previous\", onClick: () => this.switchDataset(-1) }, \"Previous\"),\n                React.createElement(\"button\", { style: { width: '25%' }, className: \"jpview-button\", title: \"Play\", onClick: this.toggleAnimation }, this.state.animating ? 'Pause' : 'Play'),\n                React.createElement(\"button\", { style: { width: '25%' }, className: \"jpview-button\", title: \"Next\", onClick: () => this.switchDataset(1) }, \"Next\"))));\n    }\n}\n","import * as React from 'react';\nimport { selectorFactory } from '../tools';\nexport const DISPLAY_MODE = [\n    { label: 'Surface', value: '1:2:0' },\n    { label: 'Surface with Edge', value: '1:2:1' },\n    { label: 'Wireframe', value: '1:1:0' },\n    { label: 'Points', value: '1:0:0' },\n    { label: 'Hidden', value: '0:-1:0' }\n];\nexport default class DisplayPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { clientId: this.props.clientId };\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"jpview-control-panel-component\" },\n            selectorFactory({\n                defaultValue: this.props.controlViewState.displayMode,\n                options: DISPLAY_MODE,\n                onChange: this.props.onDisplayModeChange,\n                label: 'Display mode'\n            }),\n            React.createElement(\"div\", { className: \"jpview-input-wrapper\" },\n                React.createElement(\"div\", { style: { width: '100%' } },\n                    React.createElement(\"label\", null,\n                        \"Opacity: \",\n                        this.props.controlViewState.opacity),\n                    React.createElement(\"input\", { className: \"jpview-slider\", type: \"range\", name: \"opacity\", min: 0.01, max: 1, step: 0.01, value: this.props.controlViewState.opacity, onChange: this.props.onOpacityChange })))));\n    }\n}\n","import * as React from 'react';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport { debounce } from '../tools';\nimport ColorPanel from './colorpanel';\nimport DatasetPanel from './datasetpanel';\nimport DisplayPanel, { DISPLAY_MODE } from './displaypanel';\nimport WrapPanel from './wrappanel';\nconst panelTitleStyle = {\n    background: 'var(--jp-layout-color2)',\n    color: 'var(--jp-ui-font-color1)'\n};\nconst panelBodyStyle = {\n    color: 'var(--jp-ui-font-color1)',\n    background: 'var(--jp-layout-color1)',\n    padding: '8px'\n};\nconst STOCK_STATE = {\n    datasetPanel: true,\n    colorPanel: true,\n    displayPanel: true,\n    filterPanel: true,\n    mainViewState: {},\n    controlViewState: {\n        selectedColor: ':',\n        colorSchema: 'erdc_rainbow_bright',\n        displayMode: DISPLAY_MODE[0].value,\n        opacity: 1\n    }\n};\nexport default class MainView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.sharedControlViewModelChanged = (_, changed) => {\n            this.setState(old => ({\n                ...old,\n                controlViewState: { ...old.controlViewState, ...changed }\n            }));\n        };\n        this.sharedMainViewModelChanged = (_, changed) => {\n            this.setState(old => {\n                const newState = {\n                    ...old,\n                    mainViewState: { ...old.mainViewState, ...changed }\n                };\n                if (changed.dataRange) {\n                    newState.controlViewState.modifiedDataRange = [...changed.dataRange];\n                }\n                if (changed.fileList) {\n                    newState.controlViewState.selectedDataset = changed.fileList[0];\n                }\n                return newState;\n            });\n        };\n        this.togglePanel = (panel) => {\n            this.setState(old => ({ ...old, [panel]: !old[panel] }));\n        };\n        this.onSelectedColorChange = (evt) => {\n            const selectedColor = evt.target.value;\n            this.updateLocalAndSharedState({ selectedColor });\n        };\n        this.onColorSchemaChange = (evt) => {\n            const colorSchema = evt.target.value;\n            this.updateLocalAndSharedState({ colorSchema });\n        };\n        this.onRangeChange = (option, value) => {\n            if (!this.state.controlViewState.modifiedDataRange) {\n                return;\n            }\n            const index = { min: 0, max: 1 };\n            const modifiedDataRange = [\n                ...this.state.controlViewState.modifiedDataRange\n            ];\n            modifiedDataRange[index[option]] = parseFloat(value);\n            this.updateLocalAndSharedState({ modifiedDataRange });\n        };\n        this.resetRange = () => {\n            const selectedColor = this.state.controlViewState.selectedColor;\n            if (selectedColor) {\n                this.updateLocalAndSharedState({ selectedColor });\n            }\n        };\n        this.onDisplayModeChange = (e) => {\n            const displayMode = e.target.value;\n            this.updateLocalAndSharedState({ displayMode });\n        };\n        this.onOpacityChange = (e) => {\n            const opacity = parseFloat(e.target.value);\n            this.updateLocalAndSharedState({ opacity });\n        };\n        this.onWarpActivationChange = (enableWarp) => {\n            this.updateLocalAndSharedState({ enableWarp });\n        };\n        this.onWarpFactorChange = (e) => {\n            const warpFactor = parseFloat(e.target.value);\n            this.updateLocalAndSharedState({ warpFactor });\n        };\n        this.onSelectedWarpChange = (e) => {\n            const selectedWarp = e.target.value;\n            const enableWarp = e.target.value !== ':';\n            const warpFactor = 0;\n            this.updateLocalAndSharedState({ selectedWarp, enableWarp, warpFactor });\n        };\n        this.onWarpUseNormalChange = (e) => {\n            const warpNormal = e.target.checked;\n            const payload = { warpNormal };\n            if (!warpNormal) {\n                payload['warpNormalAxis'] = [0, 0, 1];\n            }\n            this.updateLocalAndSharedState(payload);\n        };\n        this.onWarpNormalAxisChange = (warpNormalAxis) => {\n            this.updateLocalAndSharedState({ warpNormalAxis });\n        };\n        this.onSelectDatasetChange = (selectedDataset) => {\n            this.updateLocalAndSharedState({ selectedDataset });\n        };\n        this.updateLocalAndSharedState = (payload) => {\n            this.setState(old => ({\n                ...old,\n                controlViewState: {\n                    ...old.controlViewState,\n                    ...payload\n                }\n            }));\n            this.updateSharedState(payload);\n        };\n        this.updateSharedState = debounce((payload) => {\n            if (this.props.sharedModel) {\n                this.props.sharedModel.setControlViewState(payload);\n            }\n        }, 100);\n        this.state = STOCK_STATE;\n        this.onSharedModelPropChange(this.props.sharedModel);\n    }\n    componentWillUnmount() {\n        if (this.props.sharedModel) {\n            this.props.sharedModel.mainViewStateChanged.disconnect(this.sharedMainViewModelChanged);\n            this.props.sharedModel.controlViewStateChanged.disconnect(this.sharedControlViewModelChanged);\n        }\n    }\n    componentDidUpdate(oldProps, oldState) {\n        if (oldProps.sharedModel === this.props.sharedModel) {\n            return;\n        }\n        if (oldProps.sharedModel) {\n            oldProps.sharedModel.changed.disconnect(this.sharedMainViewModelChanged);\n            oldProps.sharedModel.controlViewStateChanged.disconnect(this.sharedControlViewModelChanged);\n        }\n        this.onSharedModelPropChange(this.props.sharedModel);\n    }\n    onSharedModelPropChange(sharedModel) {\n        if (sharedModel) {\n            sharedModel.mainViewStateChanged.connect(this.sharedMainViewModelChanged);\n            sharedModel.controlViewStateChanged.connect(this.sharedControlViewModelChanged);\n            this.setState(old => {\n                var _a, _b, _c;\n                const controlViewState = sharedModel.getControlViewState();\n                const mainViewState = sharedModel.getMainViewState();\n                controlViewState.selectedColor = (_a = controlViewState.selectedColor) !== null && _a !== void 0 ? _a : ':';\n                controlViewState.modifiedDataRange =\n                    (_b = controlViewState.modifiedDataRange) !== null && _b !== void 0 ? _b : mainViewState.dataRange;\n                controlViewState.displayMode = (_c = controlViewState.displayMode) !== null && _c !== void 0 ? _c : '1:2:0';\n                return {\n                    ...old,\n                    mainViewState,\n                    controlViewState\n                };\n            });\n        }\n        else {\n            this.setState(old => STOCK_STATE);\n        }\n    }\n    render() {\n        return (React.createElement(\"div\", { className: \"jpview-control-panel\" },\n            React.createElement(\"div\", { className: \"lm-Widget p-Widget jpview-control-panel-title\" },\n                React.createElement(\"h2\", null, this.props.filePath)),\n            React.createElement(Accordion, { expanded: this.state.datasetPanel, sx: { margin: '0px 0px' } },\n                React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, null), \"aria-controls\": \"dataSetPanela-content\", id: \"displayPanela-header\", sx: panelTitleStyle, onClick: () => this.togglePanel('datasetPanel') },\n                    React.createElement(\"span\", null, \"Dataset\")),\n                React.createElement(AccordionDetails, { sx: panelBodyStyle },\n                    React.createElement(DatasetPanel, { clientId: this.props.filePath, controlViewState: this.state.controlViewState, mainViewState: this.state.mainViewState, onSelectDatasetChange: this.onSelectDatasetChange }))),\n            React.createElement(Accordion, { expanded: this.state.displayPanel },\n                React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, null), \"aria-controls\": \"displayPanela-content\", id: \"displayPanela-header\", sx: panelTitleStyle, onClick: () => this.togglePanel('displayPanel') },\n                    React.createElement(\"span\", null, \"Display\")),\n                React.createElement(AccordionDetails, { sx: panelBodyStyle },\n                    React.createElement(DisplayPanel, { clientId: \"\", onOpacityChange: this.onOpacityChange, onDisplayModeChange: this.onDisplayModeChange, controlViewState: this.state.controlViewState }))),\n            React.createElement(Accordion, { expanded: this.state.colorPanel },\n                React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, null), \"aria-controls\": \"colorPanela-content\", id: \"colorPanela-header\", sx: panelTitleStyle, onClick: () => this.togglePanel('colorPanel') },\n                    React.createElement(\"span\", { className: \"lm-Widget\" }, \"Color\")),\n                React.createElement(AccordionDetails, { sx: panelBodyStyle, className: 'lm-Widget' },\n                    React.createElement(ColorPanel, { clientId: \"\", controlViewState: this.state.controlViewState, mainViewState: this.state.mainViewState, onRangeChange: this.onRangeChange, resetRange: this.resetRange, onColorSchemaChange: this.onColorSchemaChange, onSelectedColorChange: this.onSelectedColorChange }))),\n            React.createElement(Accordion, { expanded: this.state.filterPanel },\n                React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, null), \"aria-controls\": \"filterPanela-content\", id: \"filterPanela-header\", sx: panelTitleStyle, onClick: () => this.togglePanel('filterPanel') },\n                    React.createElement(\"span\", null, \"Warp by scalar\")),\n                React.createElement(AccordionDetails, { sx: panelBodyStyle },\n                    React.createElement(WrapPanel, { clientId: \"\", controlViewState: this.state.controlViewState, onWarpActivationChange: this.onWarpActivationChange, onWarpFactorChange: this.onWarpFactorChange, mainViewState: this.state.mainViewState, onSelectedWarpChange: this.onSelectedWarpChange, onWarpUseNormalChange: this.onWarpUseNormalChange, onWarpNormalAxisChange: this.onWarpNormalAxisChange })))));\n    }\n}\n","import * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport PanelView from './panelview';\nexport class PanelWidget extends ReactWidget {\n    constructor(tracker) {\n        var _a, _b;\n        super();\n        this._tracker = tracker;\n        this._filePath = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.context.localPath;\n        this._sharedModel = (_b = tracker.currentWidget) === null || _b === void 0 ? void 0 : _b.context.model.sharedModel;\n        tracker.currentChanged.connect((_, changed) => {\n            if (changed) {\n                this._filePath = changed.context.localPath;\n                this._sharedModel = changed.context.model.sharedModel;\n            }\n            else {\n                this._filePath = undefined;\n                this._sharedModel = undefined;\n            }\n            this.update();\n        });\n    }\n    get tracker() {\n        return this._tracker;\n    }\n    dispose() {\n        super.dispose();\n    }\n    render() {\n        return (React.createElement(PanelView, { filePath: this._filePath, sharedModel: this._sharedModel }));\n    }\n}\n","import * as React from 'react';\nimport { selectorFactory } from '../tools';\nconst INPUT_STYLE = {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: '5px'\n};\nexport default class WrapPanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onUserNormalChange = (e) => {\n            const checked = e.target.checked;\n            this.props.onWarpUseNormalChange(e);\n            if (!checked) {\n                this.setState(old => ({\n                    ...old,\n                    normalX: 0,\n                    normalY: 0,\n                    normalZ: 1\n                }));\n            }\n        };\n        this.onNormalChange = (ax, value) => {\n            this.setState(old => ({ ...old, [`normal${ax}`]: value }), () => {\n                this.props.onWarpNormalAxisChange([\n                    this.state.normalX,\n                    this.state.normalY,\n                    this.state.normalZ\n                ]);\n            });\n        };\n        this.state = {\n            clientId: this.props.clientId,\n            normalX: 0,\n            normalY: 0,\n            normalZ: 1\n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props !== prevProps) {\n            let needUpdate = false;\n            const warpNormalAxis = this.props.controlViewState.warpNormalAxis;\n            if (warpNormalAxis) {\n                needUpdate =\n                    warpNormalAxis[0] !== this.state.normalX ||\n                        warpNormalAxis[1] !== this.state.normalY ||\n                        warpNormalAxis[2] !== this.state.normalZ;\n                if (needUpdate) {\n                    this.setState(old => ({\n                        ...old,\n                        normalX: warpNormalAxis[0],\n                        normalY: warpNormalAxis[1],\n                        normalZ: warpNormalAxis[2]\n                    }));\n                }\n            }\n        }\n    }\n    render() {\n        var _a, _b, _c;\n        const warpSelectorData = [{ value: ':', label: 'None' }].concat((_b = (_a = this.props.mainViewState.colorByOptions) === null || _a === void 0 ? void 0 : _a.filter(item => {\n            return item.value.endsWith('-1');\n        })) !== null && _b !== void 0 ? _b : []);\n        return (React.createElement(\"div\", { className: \"jpview-control-panel-component\" },\n            selectorFactory({\n                defaultValue: this.props.controlViewState.selectedWarp,\n                options: warpSelectorData,\n                onChange: this.props.onSelectedWarpChange,\n                label: 'Warp by'\n            }),\n            React.createElement(\"div\", { className: \"jpview-input-wrapper\", style: { flexDirection: 'column' } },\n                React.createElement(\"div\", { style: INPUT_STYLE },\n                    React.createElement(\"label\", null, \"Scale factor\"),\n                    React.createElement(\"input\", { className: \"jpview-input\", type: \"number\", style: { width: '25%' }, value: (_c = this.props.controlViewState.warpFactor) !== null && _c !== void 0 ? _c : 0, onChange: this.props.onWarpFactorChange, \n                        // step={step}\n                        disabled: !this.props.controlViewState.enableWarp })),\n                React.createElement(\"div\", { style: INPUT_STYLE },\n                    React.createElement(\"label\", null, \"Use normal\"),\n                    React.createElement(\"input\", { className: \"jpview-input\", type: \"checkbox\", style: { width: 'auto' }, disabled: !this.props.controlViewState.enableWarp, checked: !!this.props.controlViewState.warpNormal, onChange: this.onUserNormalChange })),\n                React.createElement(\"div\", { style: INPUT_STYLE }, ['X', 'Y', 'Z'].map(ax => {\n                    return (React.createElement(\"input\", { type: 'number', style: { width: '25%' }, className: \"jpview-input\", key: ax, placeholder: ax, disabled: !this.props.controlViewState.enableWarp ||\n                            !this.props.controlViewState.warpNormal, value: this.state[`normal${ax}`], onChange: e => {\n                            this.onNormalChange(ax, parseFloat(e.target.value));\n                        } }));\n                })))));\n    }\n}\n","export class ParserManager {\n    constructor() {\n        this._parser = new Map();\n    }\n    registerParser(parser) {\n        parser.supportedType.forEach(ext => {\n            if (!this._parser.has(ext)) {\n                this._parser.set(ext, parser);\n            }\n        });\n    }\n    get parser() {\n        return this._parser;\n    }\n    supportedFormat() {\n        return Array.from(this._parser.keys());\n    }\n    getParser(ext) {\n        return this._parser.get(ext);\n    }\n}\n","export class MeshIOParser {\n    constructor() {\n        this.supportedType = [\n            'msh',\n            'f3grid',\n            'mdpa',\n            'ply',\n            'stl',\n            'xdmf',\n            'xmf',\n            'cgns',\n            'h5m',\n            'inp',\n            'avs',\n            'xml',\n            'e',\n            'exo',\n            'ex2',\n            'hmf',\n            'med',\n            'mesh',\n            'meshb',\n            'bdf',\n            'fem',\n            'nas',\n            'vol',\n            'vol.gz',\n            'obj',\n            'off',\n            'post',\n            'post.gz',\n            'dato',\n            'dato.gz',\n            'su2',\n            'svg',\n            'dat',\n            'tec',\n            'ele',\n            'node',\n            'ugrid',\n            'wkt'\n        ];\n    }\n    readFile(fileContent, fileExtension, fullPath, kernel) {\n        if (!this.supportedType.includes(fileExtension)) {\n            throw Error('Not supported file');\n        }\n        if (!kernel) {\n            throw Error('Kernel is required for this file');\n        }\n        if (!fullPath) {\n            throw Error('Full path is required for this file');\n        }\n        const content = kernel.startKernel().then(() => {\n            const result = kernel.convertFile(fullPath, fileContent);\n            return result;\n        });\n        return content;\n    }\n}\n","export class VtkParser {\n    constructor() {\n        this.supportedType = ['vtu', 'vtk', 'vtp'];\n        this.nativeSupport = true;\n    }\n    readFile(fileContent, fileExtension) {\n        if (!this.supportedType.includes(fileExtension)) {\n            throw Error('Not supported file');\n        }\n        return Promise.resolve({ binary: fileContent, type: fileExtension });\n    }\n}\n","import { Token } from '@lumino/coreutils';\nexport const IJupyterViewDocTracker = new Token('jupyterViewDocTracker');\n","import * as React from 'react';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport jvControlLight from '../style/icons/jvc-light.svg';\nimport rotateRight from '../style/icons/rotate_right_white_24dp.svg';\nimport rotateLeft from '../style/icons/rotate_left_white_24dp.svg';\nimport focusView from '../style/icons/center_focus_weak_white_24dp.svg';\nexport const jvcLightIcon = new LabIcon({\n    name: 'jupyterview:control-light',\n    svgstr: jvControlLight\n});\nexport const rotateRightIcon = new LabIcon({\n    name: 'jupyterview:rotate-right',\n    svgstr: rotateRight\n});\nexport const rotateLeftIcon = new LabIcon({\n    name: 'jupyterview:rotate-left',\n    svgstr: rotateLeft\n});\nexport const focusViewIcon = new LabIcon({\n    name: 'jupyterview:focus-view',\n    svgstr: focusView\n});\nexport function majorAxis(vec3, idxA, idxB) {\n    const axis = [0, 0, 0];\n    const idx = Math.abs(vec3[idxA]) > Math.abs(vec3[idxB]) ? idxA : idxB;\n    const value = vec3[idx] > 0 ? 1 : -1;\n    axis[idx] = value;\n    return axis;\n}\nexport function moveCamera(camera, renderer, interactor, focalPoint, position, viewUp, animateSteps = 0) {\n    const EPSILON = 0.000001;\n    const originalFocalPoint = camera.getFocalPoint();\n    const originalPosition = camera.getPosition();\n    const originalViewUp = camera.getViewUp();\n    const animationStack = [\n        {\n            focalPoint,\n            position,\n            viewUp\n        }\n    ];\n    if (animateSteps) {\n        const deltaFocalPoint = [\n            (originalFocalPoint[0] - focalPoint[0]) / animateSteps,\n            (originalFocalPoint[1] - focalPoint[1]) / animateSteps,\n            (originalFocalPoint[2] - focalPoint[2]) / animateSteps\n        ];\n        const deltaPosition = [\n            (originalPosition[0] - position[0]) / animateSteps,\n            (originalPosition[1] - position[1]) / animateSteps,\n            (originalPosition[2] - position[2]) / animateSteps\n        ];\n        const deltaViewUp = [\n            (originalViewUp[0] - viewUp[0]) / animateSteps,\n            (originalViewUp[1] - viewUp[1]) / animateSteps,\n            (originalViewUp[2] - viewUp[2]) / animateSteps\n        ];\n        const needSteps = deltaFocalPoint[0] ||\n            deltaFocalPoint[1] ||\n            deltaFocalPoint[2] ||\n            deltaPosition[0] ||\n            deltaPosition[1] ||\n            deltaPosition[2] ||\n            deltaViewUp[0] ||\n            deltaViewUp[1] ||\n            deltaViewUp[2];\n        const focalPointDeltaAxisCount = deltaFocalPoint\n            .map(i => (Math.abs(i) < EPSILON ? 0 : 1))\n            .reduce((a, b) => (a + b), 0);\n        const positionDeltaAxisCount = deltaPosition\n            .map(i => (Math.abs(i) < EPSILON ? 0 : 1))\n            .reduce((a, b) => (a + b), 0);\n        const viewUpDeltaAxisCount = deltaViewUp\n            .map(i => (Math.abs(i) < EPSILON ? 0 : 1))\n            .reduce((a, b) => (a + b), 0);\n        const rotation180Only = viewUpDeltaAxisCount === 1 &&\n            positionDeltaAxisCount === 0 &&\n            focalPointDeltaAxisCount === 0;\n        if (needSteps) {\n            if (rotation180Only) {\n                const availableAxes = originalFocalPoint\n                    .map((fp, i) => Math.abs(originalPosition[i] - fp) < EPSILON ? i : null)\n                    .filter(i => i !== null);\n                const axisCorrectionIndex = availableAxes.find(v => Math.abs(deltaViewUp[v]) < EPSILON);\n                for (let i = 0; i < animateSteps; i++) {\n                    const newViewUp = [\n                        viewUp[0] + (i + 1) * deltaViewUp[0],\n                        viewUp[1] + (i + 1) * deltaViewUp[1],\n                        viewUp[2] + (i + 1) * deltaViewUp[2]\n                    ];\n                    newViewUp[axisCorrectionIndex] = Math.sin((Math.PI * i) / (animateSteps - 1));\n                    animationStack.push({\n                        focalPoint,\n                        position,\n                        viewUp: newViewUp\n                    });\n                }\n            }\n            else {\n                for (let i = 0; i < animateSteps; i++) {\n                    animationStack.push({\n                        focalPoint: [\n                            focalPoint[0] + (i + 1) * deltaFocalPoint[0],\n                            focalPoint[1] + (i + 1) * deltaFocalPoint[1],\n                            focalPoint[2] + (i + 1) * deltaFocalPoint[2]\n                        ],\n                        position: [\n                            position[0] + (i + 1) * deltaPosition[0],\n                            position[1] + (i + 1) * deltaPosition[1],\n                            position[2] + (i + 1) * deltaPosition[2]\n                        ],\n                        viewUp: [\n                            viewUp[0] + (i + 1) * deltaViewUp[0],\n                            viewUp[1] + (i + 1) * deltaViewUp[1],\n                            viewUp[2] + (i + 1) * deltaViewUp[2]\n                        ]\n                    });\n                }\n            }\n        }\n    }\n    if (animationStack.length === 1) {\n        // update camera directly\n        camera.set(animationStack.pop());\n        renderer.resetCameraClippingRange();\n        if (interactor.getLightFollowCamera()) {\n            renderer.updateLightsGeometryToFollowCamera();\n        }\n        return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n        const now = performance.now().toString();\n        const animationRequester = `moveCamera.${now}`;\n        interactor.requestAnimation(animationRequester);\n        let intervalId = undefined;\n        const consumeAnimationStack = () => {\n            if (animationStack.length) {\n                const { focalPoint: cameraFocalPoint, position: cameraPosition, viewUp: cameraViewUp } = animationStack.pop();\n                camera.setFocalPoint(cameraFocalPoint[0], cameraFocalPoint[1], cameraFocalPoint[2]);\n                camera.setPosition(cameraPosition[0], cameraPosition[1], cameraPosition[2]);\n                camera.setViewUp(cameraViewUp[0], cameraViewUp[1], cameraViewUp[2]);\n                renderer.resetCameraClippingRange();\n                if (interactor.getLightFollowCamera()) {\n                    renderer.updateLightsGeometryToFollowCamera();\n                }\n            }\n            else {\n                clearInterval(intervalId);\n                interactor.cancelAnimation(animationRequester);\n                resolve();\n            }\n        };\n        intervalId = setInterval(consumeAnimationStack, 1);\n    });\n}\nexport const VIEW_ORIENTATIONS = {\n    default: {\n        axis: 1,\n        orientation: -1,\n        viewUp: [0, 0, 1]\n    },\n    x: {\n        axis: 0,\n        orientation: 1,\n        viewUp: [0, 0, 1]\n    },\n    y: {\n        axis: 1,\n        orientation: 1,\n        viewUp: [0, 0, 1]\n    },\n    z: {\n        axis: 2,\n        orientation: 1,\n        viewUp: [0, 1, 0]\n    }\n};\nexport function selectorFactory(props) {\n    return (React.createElement(\"div\", { className: \"lm-Widget p-Widget jp-Dialog-body\", style: { margin: '2px 2px 5px 2px' } },\n        React.createElement(\"div\", { className: \"jp-select-wrapper\", style: { height: '32px' } },\n            props.label ? React.createElement(\"label\", null, props.label) : React.createElement(\"div\", null),\n            React.createElement(\"select\", { value: props.defaultValue, onChange: props.onChange, className: \"jp-mod-styled\", style: { marginTop: '2px' } }, props.options.map(option => (React.createElement(\"option\", { value: option.value }, option.label)))))));\n}\nexport const debounce = (func, timeout = 100) => {\n    let timeoutId;\n    return (...args) => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n            func(...args);\n        }, timeout);\n    };\n};\nexport function convertPath(windowsPath) {\n    return windowsPath\n        .replace(/^\\\\\\\\\\?\\\\/, '')\n        .replace(/\\\\/g, '/')\n        .replace(/\\/\\/+/g, '/');\n}\nexport function b64_to_utf8(str) {\n    return decodeURIComponent(atob(str));\n}\n","import { WidgetTracker } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nexport class VtkTracker extends WidgetTracker {\n    constructor() {\n        super(...arguments);\n        this._widgetDisposed = new Signal(this);\n    }\n    add(widget) {\n        widget.disposed.connect(() => {\n            this._widgetDisposed.emit(widget);\n        });\n        return super.add(widget);\n    }\n    get widgetDisposed() {\n        return this._widgetDisposed;\n    }\n}\n","/* (ignored) */"],"names":[],"sourceRoot":""}